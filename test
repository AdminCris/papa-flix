package com.material3.material3;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.splashscreen.SplashScreen;

import android.content.Intent;
import android.content.SharedPreferences;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.view.View;
import android.view.ViewTreeObserver;
import android.widget.FrameLayout;

import com.google.android.material.bottomsheet.BottomSheetBehavior;
import com.google.android.material.bottomsheet.BottomSheetDialog;
import com.google.android.material.dialog.MaterialAlertDialogBuilder;
import com.google.android.material.snackbar.Snackbar;
import com.material3.material3.databinding.ActivityCredBinding;
import com.material3.material3.databinding.ActivityMainBinding;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class MainActivity extends AppCompatActivity {

    private ActivityMainBinding binding;
    private GithubUpdater api;
    private ExecutorService executorService;
    private SharedPreferences sharedPreferences;
    private SharedPreferences.Editor editor;
    private BottomSheetDialog bottomSheetDialog;
    private Handler handler;
    private AlertDialog alertDialog;
    private final int delayMills = 2000;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        var splashScreen = SplashScreen.installSplashScreen(this);
        super.onCreate(savedInstanceState);
        splashScreen.setKeepOnScreenCondition(() -> false);
        binding = ActivityMainBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());
        final View content = findViewById(android.R.id.content);
        content.getViewTreeObserver().addOnPreDrawListener(
                new ViewTreeObserver.OnPreDrawListener() {
                    @Override
                    public boolean onPreDraw() {
                        content.getViewTreeObserver().removeOnPreDrawListener(this);
                        return true;
                    }
                });
        initializeTheme();
        setupClickListeners();
    }


    private void initializeTheme() {
        api = new GithubUpdater();
        executorService = Executors.newSingleThreadExecutor();
        bottomSheetDialog = new BottomSheetDialog(this);
        handler = new Handler(Looper.getMainLooper());
        sharedPreferences = getSharedPreferences("getDefaultSharedPreferences", MODE_PRIVATE);
        editor = sharedPreferences.edit();
    }

    private void setupClickListeners() {
        binding.setupBtn.setOnClickListener(v -> setGithubCredentials());
        binding.updateBtn.setOnClickListener(v -> showConfirmationDialog());
        binding.importBtn.setOnClickListener(v -> showImportFileDialog());
    }

    private void showImportFileDialog() {
        if (alertDialog != null && alertDialog.isShowing()) {
            alertDialog.dismiss();
        }

        String title = "Import Selection";
        String message = """
                Choose your preferred method for importing data:
                
                - Offline Import: Use this option to import data from local files stored on your device. \
                Ideal for secure environments or when internet access is limited.
                
                - Online Import: Connect to cloud services or online databases to import data directly. \
                Perfect for accessing the latest information and collaborating in real-time.
                
                Select the method that best suits your needs and workflow.""";

        alertDialog = new MaterialAlertDialogBuilder(this)
                .setTitle(title)
                .setMessage(message)
                .setPositiveButton("ONLINE", (dialog, which) -> {
                    binding.lottie.setVisibility(View.VISIBLE);
                    executorService.execute(() -> handler.postDelayed(this::executeReceiveFile, delayMills));
                    alertDialog.dismiss();
                })
                .setNeutralButton("OFFLINE", (dialog, which) -> {
                    importData();
                    alertDialog.dismiss();
                })
                .create();

        alertDialog.show();
    }

    private void showConfirmationDialog() {
        if (alertDialog != null && alertDialog.isShowing()) {
            alertDialog.dismiss();
        }

        String title = "Verify Details";
        String message = """
                Ensure that the following information is correct before proceeding:
                
                - Token: Your authentication token.
                - Username: Your GitHub username.
                - Repo Name: The name of the repository.
                - Filename: The name of the file to be sent.
                
                Double-check these details to avoid errors during the data transfer.""";

        alertDialog = new MaterialAlertDialogBuilder(this)
                .setTitle(title)
                .setMessage(message)
                .setPositiveButton("CONFIRM", (dialog, which) -> {
                    binding.lottie.setVisibility(View.VISIBLE);
                    executorService.execute(() -> handler.postDelayed(this::executePushFile, delayMills));
                    alertDialog.dismiss();
                })
                .setNeutralButton("CANCEL", (dialog, which) -> alertDialog.dismiss())
                .setCancelable(false)
                .create();

        alertDialog.show();
    }


    private void executePushFile() {
        String token = sharedPreferences.getString("token", "");
        String username = sharedPreferences.getString("user", "");
        String repo = sharedPreferences.getString("repo", "");
        String filename = sharedPreferences.getString("filename", "");
        String branch = "main";
        String content = binding.dataFile.getText() != null ? binding.dataFile.getText().toString() : "";

        if (token.isEmpty() || username.isEmpty() || repo.isEmpty() || filename.isEmpty() || content.isEmpty()) {
            showMessage("Error: All fields must be filled out.");
            binding.lottie.setVisibility(View.GONE);
            return;
        }

        binding.lottie.setVisibility(View.VISIBLE);

        api.pushFileToGithub(token, username, repo, branch, filename, content, new GithubUpdater.PushFileCallback() {
            @Override
            public void onSuccess(String result) {
                binding.dataFile.setText("");
                binding.lottie.setVisibility(View.GONE);
                showMessage("Update Successful!");
            }

            @Override
            public void onError(String error) {
                binding.dataFile.setText(error);
                binding.lottie.setVisibility(View.GONE);
            }
        });
    }

    private void executeReceiveFile() {
        String token = sharedPreferences.getString("token", "");
        String username = sharedPreferences.getString("user", "");
        String repo = sharedPreferences.getString("repo", "");
        String filename = sharedPreferences.getString("filename", "");
        String branch = "main";

        if (token.isEmpty() || username.isEmpty() || repo.isEmpty() || filename.isEmpty()) {
            showMessage("Error: All fields must be filled out.");
            binding.lottie.setVisibility(View.GONE);
            return;
        }

        api.getFileFromGithub(token, username, repo, branch, filename, new GithubUpdater.FileRetrievalCallback() {
            @Override
            public void onSuccess(String result) {
                binding.lottie.setVisibility(View.GONE);
                binding.dataFile.setText(result);
                showMessage("Received Successful!");
            }

            @Override
            public void onError(String error) {
                binding.lottie.setVisibility(View.GONE);
                binding.dataFile.setText(error);
            }
        });
    }

    private void setGithubCredentials() {
        ActivityCredBinding githubDialogBinding = ActivityCredBinding.inflate(getLayoutInflater());
        bottomSheetDialog.setContentView(githubDialogBinding.getRoot());
        bottomSheetDialog.setCancelable(false);
        bottomSheetDialog.show();

        BottomSheetBehavior<FrameLayout> bottomSheetBehavior = bottomSheetDialog.getBehavior();
        bottomSheetBehavior.setState(BottomSheetBehavior.STATE_EXPANDED);

        String saveToken = sharedPreferences.getString("token", "");
        githubDialogBinding.ghToken.setText(saveToken);

        String saveUser = sharedPreferences.getString("user", "");
        githubDialogBinding.ghUsername.setText(saveUser);

        String saveRepo = sharedPreferences.getString("repo", "");
        githubDialogBinding.ghRepoName.setText(saveRepo);

        String saveFilename = sharedPreferences.getString("filename", "");
        githubDialogBinding.ghFilename.setText(saveFilename);

        githubDialogBinding.close.setOnClickListener(v -> bottomSheetDialog.dismiss());
        githubDialogBinding.clear.setOnClickListener(v -> {

            githubDialogBinding.ghToken.setText("");
            githubDialogBinding.ghUsername.setText("");
            githubDialogBinding.ghRepoName.setText("");
            githubDialogBinding.ghFilename.setText("");

            editor.putString("token", "");
            editor.putString("user", "");
            editor.putString("repo", "");
            editor.putString("filename", "");
            editor.apply();

        });

        githubDialogBinding.save.setOnClickListener(v -> {
            String ghToken = githubDialogBinding.ghToken.getText() != null? githubDialogBinding.ghToken.getText().toString() : "";
            String ghUsername = githubDialogBinding.ghUsername.getText() != null? githubDialogBinding.ghUsername.getText().toString() : "";
            String ghRepoName = githubDialogBinding.ghRepoName.getText() != null? githubDialogBinding.ghRepoName.getText().toString() : "";
            String ghFilename = githubDialogBinding.ghFilename.getText() != null? githubDialogBinding.ghFilename.getText().toString() : "";

            editor.putString("token", ghToken);
            editor.putString("user", ghUsername);
            editor.putString("repo", ghRepoName);
            editor.putString("filename", ghFilename);
            editor.apply();
            bottomSheetDialog.dismiss();

        });
    }


    private void importData() {
        Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
        intent.setType("*/*");
        pickFile.launch(intent);
    }

    private final ActivityResultLauncher<Intent> pickFile = registerForActivityResult(
            new ActivityResultContracts.StartActivityForResult(), result -> {
                if (result.getResultCode() == RESULT_OK && result.getData() != null) {
                    Uri uri = result.getData().getData();
                    readDataFromUri(uri);
                }
            });

    private void readDataFromUri(Uri uri) {
        if (uri == null) return;

        StringBuilder stringBuilder = new StringBuilder();
        try (InputStream inputStream = getContentResolver().openInputStream(uri);
             BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {

            String line;
            while ((line = reader.readLine()) != null) {
                stringBuilder.append(line);
            }
            binding.dataFile.setText(stringBuilder.toString());
        } catch (IOException e) {
            showMessage("Error reading file: " + e.getMessage());
        }
    }

    private void showMessage(String message) {
        Snackbar.make(binding.getRoot(), message, Snackbar.LENGTH_SHORT).show();
    }
}
package com.material3.material3;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.splashscreen.SplashScreen;

import android.content.Intent;
import android.content.SharedPreferences;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.view.View;
import android.view.ViewTreeObserver;
import android.widget.FrameLayout;

import com.google.android.material.bottomsheet.BottomSheetBehavior;
import com.google.android.material.bottomsheet.BottomSheetDialog;
import com.google.android.material.dialog.MaterialAlertDialogBuilder;
import com.google.android.material.snackbar.Snackbar;
import com.material3.material3.databinding.ActivityCredBinding;
import com.material3.material3.databinding.ActivityMainBinding;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class MainActivity extends AppCompatActivity {

    private ActivityMainBinding binding;
    private GithubUpdater api;
    private ExecutorService executorService;
    private SharedPreferences sharedPreferences;
    private SharedPreferences.Editor editor;
    private BottomSheetDialog bottomSheetDialog;
    private Handler handler;
    private AlertDialog alertDialog;
    private final int delayMills = 2000;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        var splashScreen = SplashScreen.installSplashScreen(this);
        super.onCreate(savedInstanceState);
        splashScreen.setKeepOnScreenCondition(() -> false);
        binding = ActivityMainBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());
        final View content = findViewById(android.R.id.content);
        content.getViewTreeObserver().addOnPreDrawListener(
                new ViewTreeObserver.OnPreDrawListener() {
                    @Override
                    public boolean onPreDraw() {
                        content.getViewTreeObserver().removeOnPreDrawListener(this);
                        return true;
                    }
                });
        initializeTheme();
        setupClickListeners();
    }


    private void initializeTheme() {
        api = new GithubUpdater();
        executorService = Executors.newSingleThreadExecutor();
        bottomSheetDialog = new BottomSheetDialog(this);
        handler = new Handler(Looper.getMainLooper());
        sharedPreferences = getSharedPreferences("getDefaultSharedPreferences", MODE_PRIVATE);
        editor = sharedPreferences.edit();
    }

    private void setupClickListeners() {
        binding.setupBtn.setOnClickListener(v -> setGithubCredentials());
        binding.updateBtn.setOnClickListener(v -> showConfirmationDialog());
        binding.importBtn.setOnClickListener(v -> showImportFileDialog());
    }

    private void showImportFileDialog() {
        if (alertDialog != null && alertDialog.isShowing()) {
            alertDialog.dismiss();
        }

        String title = "Import Selection";
        String message = """
                Choose your preferred method for importing data:
                
                - Offline Import: Use this option to import data from local files stored on your device. \
                Ideal for secure environments or when internet access is limited.
                
                - Online Import: Connect to cloud services or online databases to import data directly. \
                Perfect for accessing the latest information and collaborating in real-time.
                
                Select the method that best suits your needs and workflow.""";

        alertDialog = new MaterialAlertDialogBuilder(this)
                .setTitle(title)
                .setMessage(message)
                .setPositiveButton("ONLINE", (dialog, which) -> {
                    binding.lottie.setVisibility(View.VISIBLE);
                    executorService.execute(() -> handler.postDelayed(this::executeReceiveFile, delayMills));
                    alertDialog.dismiss();
                })
                .setNeutralButton("OFFLINE", (dialog, which) -> {
                    importData();
                    alertDialog.dismiss();
                })
                .create();

        alertDialog.show();
    }

    private void showConfirmationDialog() {
        if (alertDialog != null && alertDialog.isShowing()) {
            alertDialog.dismiss();
        }

        String title = "Verify Details";
        String message = """
                Ensure that the following information is correct before proceeding:
                
                - Token: Your authentication token.
                - Username: Your GitHub username.
                - Repo Name: The name of the repository.
                - Filename: The name of the file to be sent.
                
                Double-check these details to avoid errors during the data transfer.""";

        alertDialog = new MaterialAlertDialogBuilder(this)
                .setTitle(title)
                .setMessage(message)
                .setPositiveButton("CONFIRM", (dialog, which) -> {
                    binding.lottie.setVisibility(View.VISIBLE);
                    executorService.execute(() -> handler.postDelayed(this::executePushFile, delayMills));
                    alertDialog.dismiss();
                })
                .setNeutralButton("CANCEL", (dialog, which) -> alertDialog.dismiss())
                .setCancelable(false)
                .create();

        alertDialog.show();
    }


    private void executePushFile() {
        String token = sharedPreferences.getString("token", "");
        String username = sharedPreferences.getString("user", "");
        String repo = sharedPreferences.getString("repo", "");
        String filename = sharedPreferences.getString("filename", "");
        String branch = "main";
        String content = binding.dataFile.getText() != null ? binding.dataFile.getText().toString() : "";

        if (token.isEmpty() || username.isEmpty() || repo.isEmpty() || filename.isEmpty() || content.isEmpty()) {
            showMessage("Error: All fields must be filled out.");
            binding.lottie.setVisibility(View.GONE);
            return;
        }

        binding.lottie.setVisibility(View.VISIBLE);

        api.pushFileToGithub(token, username, repo, branch, filename, content, new GithubUpdater.PushFileCallback() {
            @Override
            public void onSuccess(String result) {
                binding.dataFile.setText("");
                binding.lottie.setVisibility(View.GONE);
                showMessage("Update Successful!");
            }

            @Override
            public void onError(String error) {
                binding.dataFile.setText(error);
                binding.lottie.setVisibility(View.GONE);
            }
        });
    }

    private void executeReceiveFile() {
        String token = sharedPreferences.getString("token", "");
        String username = sharedPreferences.getString("user", "");
        String repo = sharedPreferences.getString("repo", "");
        String filename = sharedPreferences.getString("filename", "");
        String branch = "main";

        if (token.isEmpty() || username.isEmpty() || repo.isEmpty() || filename.isEmpty()) {
            showMessage("Error: All fields must be filled out.");
            binding.lottie.setVisibility(View.GONE);
            return;
        }

        api.getFileFromGithub(token, username, repo, branch, filename, new GithubUpdater.FileRetrievalCallback() {
            @Override
            public void onSuccess(String result) {
                binding.lottie.setVisibility(View.GONE);
                binding.dataFile.setText(result);
                showMessage("Received Successful!");
            }

            @Override
            public void onError(String error) {
                binding.lottie.setVisibility(View.GONE);
                binding.dataFile.setText(error);
            }
        });
    }

    private void setGithubCredentials() {
        ActivityCredBinding githubDialogBinding = ActivityCredBinding.inflate(getLayoutInflater());
        bottomSheetDialog.setContentView(githubDialogBinding.getRoot());
        bottomSheetDialog.setCancelable(false);
        bottomSheetDialog.show();

        BottomSheetBehavior<FrameLayout> bottomSheetBehavior = bottomSheetDialog.getBehavior();
        bottomSheetBehavior.setState(BottomSheetBehavior.STATE_EXPANDED);

        String saveToken = sharedPreferences.getString("token", "");
        githubDialogBinding.ghToken.setText(saveToken);

        String saveUser = sharedPreferences.getString("user", "");
        githubDialogBinding.ghUsername.setText(saveUser);

        String saveRepo = sharedPreferences.getString("repo", "");
        githubDialogBinding.ghRepoName.setText(saveRepo);

        String saveFilename = sharedPreferences.getString("filename", "");
        githubDialogBinding.ghFilename.setText(saveFilename);

        githubDialogBinding.close.setOnClickListener(v -> bottomSheetDialog.dismiss());
        githubDialogBinding.clear.setOnClickListener(v -> {

            githubDialogBinding.ghToken.setText("");
            githubDialogBinding.ghUsername.setText("");
            githubDialogBinding.ghRepoName.setText("");
            githubDialogBinding.ghFilename.setText("");

            editor.putString("token", "");
            editor.putString("user", "");
            editor.putString("repo", "");
            editor.putString("filename", "");
            editor.apply();

        });

        githubDialogBinding.save.setOnClickListener(v -> {
            String ghToken = githubDialogBinding.ghToken.getText() != null? githubDialogBinding.ghToken.getText().toString() : "";
            String ghUsername = githubDialogBinding.ghUsername.getText() != null? githubDialogBinding.ghUsername.getText().toString() : "";
            String ghRepoName = githubDialogBinding.ghRepoName.getText() != null? githubDialogBinding.ghRepoName.getText().toString() : "";
            String ghFilename = githubDialogBinding.ghFilename.getText() != null? githubDialogBinding.ghFilename.getText().toString() : "";

            editor.putString("token", ghToken);
            editor.putString("user", ghUsername);
            editor.putString("repo", ghRepoName);
            editor.putString("filename", ghFilename);
            editor.apply();
            bottomSheetDialog.dismiss();

        });
    }


    private void importData() {
        Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
        intent.setType("*/*");
        pickFile.launch(intent);
    }

    private final ActivityResultLauncher<Intent> pickFile = registerForActivityResult(
            new ActivityResultContracts.StartActivityForResult(), result -> {
                if (result.getResultCode() == RESULT_OK && result.getData() != null) {
                    Uri uri = result.getData().getData();
                    readDataFromUri(uri);
                }
            });

    private void readDataFromUri(Uri uri) {
        if (uri == null) return;

        StringBuilder stringBuilder = new StringBuilder();
        try (InputStream inputStream = getContentResolver().openInputStream(uri);
             BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {

            String line;
            while ((line = reader.readLine()) != null) {
                stringBuilder.append(line);
            }
            binding.dataFile.setText(stringBuilder.toString());
        } catch (IOException e) {
            showMessage("Error reading file: " + e.getMessage());
        }
    }

    private void showMessage(String message) {
        Snackbar.make(binding.getRoot(), message, Snackbar.LENGTH_SHORT).show();
    }
}
package com.material3.material3;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.splashscreen.SplashScreen;

import android.content.Intent;
import android.content.SharedPreferences;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.view.View;
import android.view.ViewTreeObserver;
import android.widget.FrameLayout;

import com.google.android.material.bottomsheet.BottomSheetBehavior;
import com.google.android.material.bottomsheet.BottomSheetDialog;
import com.google.android.material.dialog.MaterialAlertDialogBuilder;
import com.google.android.material.snackbar.Snackbar;
import com.material3.material3.databinding.ActivityCredBinding;
import com.material3.material3.databinding.ActivityMainBinding;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class MainActivity extends AppCompatActivity {

    private ActivityMainBinding binding;
    private GithubUpdater api;
    private ExecutorService executorService;
    private SharedPreferences sharedPreferences;
    private SharedPreferences.Editor editor;
    private BottomSheetDialog bottomSheetDialog;
    private Handler handler;
    private AlertDialog alertDialog;
    private final int delayMills = 2000;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        var splashScreen = SplashScreen.installSplashScreen(this);
        super.onCreate(savedInstanceState);
        splashScreen.setKeepOnScreenCondition(() -> false);
        binding = ActivityMainBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());
        final View content = findViewById(android.R.id.content);
        content.getViewTreeObserver().addOnPreDrawListener(
                new ViewTreeObserver.OnPreDrawListener() {
                    @Override
                    public boolean onPreDraw() {
                        content.getViewTreeObserver().removeOnPreDrawListener(this);
                        return true;
                    }
                });
        initializeTheme();
        setupClickListeners();
    }


    private void initializeTheme() {
        api = new GithubUpdater();
        executorService = Executors.newSingleThreadExecutor();
        bottomSheetDialog = new BottomSheetDialog(this);
        handler = new Handler(Looper.getMainLooper());
        sharedPreferences = getSharedPreferences("getDefaultSharedPreferences", MODE_PRIVATE);
        editor = sharedPreferences.edit();
    }

    private void setupClickListeners() {
        binding.setupBtn.setOnClickListener(v -> setGithubCredentials());
        binding.updateBtn.setOnClickListener(v -> showConfirmationDialog());
        binding.importBtn.setOnClickListener(v -> showImportFileDialog());
    }

    private void showImportFileDialog() {
        if (alertDialog != null && alertDialog.isShowing()) {
            alertDialog.dismiss();
        }

        String title = "Import Selection";
        String message = """
                Choose your preferred method for importing data:
                
                - Offline Import: Use this option to import data from local files stored on your device. \
                Ideal for secure environments or when internet access is limited.
                
                - Online Import: Connect to cloud services or online databases to import data directly. \
                Perfect for accessing the latest information and collaborating in real-time.
                
                Select the method that best suits your needs and workflow.""";

        alertDialog = new MaterialAlertDialogBuilder(this)
                .setTitle(title)
                .setMessage(message)
                .setPositiveButton("ONLINE", (dialog, which) -> {
                    binding.lottie.setVisibility(View.VISIBLE);
                    executorService.execute(() -> handler.postDelayed(this::executeReceiveFile, delayMills));
                    alertDialog.dismiss();
                })
                .setNeutralButton("OFFLINE", (dialog, which) -> {
                    importData();
                    alertDialog.dismiss();
                })
                .create();

        alertDialog.show();
    }

    private void showConfirmationDialog() {
        if (alertDialog != null && alertDialog.isShowing()) {
            alertDialog.dismiss();
        }

        String title = "Verify Details";
        String message = """
                Ensure that the following information is correct before proceeding:
                
                - Token: Your authentication token.
                - Username: Your GitHub username.
                - Repo Name: The name of the repository.
                - Filename: The name of the file to be sent.
                
                Double-check these details to avoid errors during the data transfer.""";

        alertDialog = new MaterialAlertDialogBuilder(this)
                .setTitle(title)
                .setMessage(message)
                .setPositiveButton("CONFIRM", (dialog, which) -> {
                    binding.lottie.setVisibility(View.VISIBLE);
                    executorService.execute(() -> handler.postDelayed(this::executePushFile, delayMills));
                    alertDialog.dismiss();
                })
                .setNeutralButton("CANCEL", (dialog, which) -> alertDialog.dismiss())
                .setCancelable(false)
                .create();

        alertDialog.show();
    }


    private void executePushFile() {
        String token = sharedPreferences.getString("token", "");
        String username = sharedPreferences.getString("user", "");
        String repo = sharedPreferences.getString("repo", "");
        String filename = sharedPreferences.getString("filename", "");
        String branch = "main";
        String content = binding.dataFile.getText() != null ? binding.dataFile.getText().toString() : "";

        if (token.isEmpty() || username.isEmpty() || repo.isEmpty() || filename.isEmpty() || content.isEmpty()) {
            showMessage("Error: All fields must be filled out.");
            binding.lottie.setVisibility(View.GONE);
            return;
        }

        binding.lottie.setVisibility(View.VISIBLE);

        api.pushFileToGithub(token, username, repo, branch, filename, content, new GithubUpdater.PushFileCallback() {
            @Override
            public void onSuccess(String result) {
                binding.dataFile.setText("");
                binding.lottie.setVisibility(View.GONE);
                showMessage("Update Successful!");
            }

            @Override
            public void onError(String error) {
                binding.dataFile.setText(error);
                binding.lottie.setVisibility(View.GONE);
            }
        });
    }

    private void executeReceiveFile() {
        String token = sharedPreferences.getString("token", "");
        String username = sharedPreferences.getString("user", "");
        String repo = sharedPreferences.getString("repo", "");
        String filename = sharedPreferences.getString("filename", "");
        String branch = "main";

        if (token.isEmpty() || username.isEmpty() || repo.isEmpty() || filename.isEmpty()) {
            showMessage("Error: All fields must be filled out.");
            binding.lottie.setVisibility(View.GONE);
            return;
        }

        api.getFileFromGithub(token, username, repo, branch, filename, new GithubUpdater.FileRetrievalCallback() {
            @Override
            public void onSuccess(String result) {
                binding.lottie.setVisibility(View.GONE);
                binding.dataFile.setText(result);
                showMessage("Received Successful!");
            }

            @Override
            public void onError(String error) {
                binding.lottie.setVisibility(View.GONE);
                binding.dataFile.setText(error);
            }
        });
    }

    private void setGithubCredentials() {
        ActivityCredBinding githubDialogBinding = ActivityCredBinding.inflate(getLayoutInflater());
        bottomSheetDialog.setContentView(githubDialogBinding.getRoot());
        bottomSheetDialog.setCancelable(false);
        bottomSheetDialog.show();

        BottomSheetBehavior<FrameLayout> bottomSheetBehavior = bottomSheetDialog.getBehavior();
        bottomSheetBehavior.setState(BottomSheetBehavior.STATE_EXPANDED);

        String saveToken = sharedPreferences.getString("token", "");
        githubDialogBinding.ghToken.setText(saveToken);

        String saveUser = sharedPreferences.getString("user", "");
        githubDialogBinding.ghUsername.setText(saveUser);

        String saveRepo = sharedPreferences.getString("repo", "");
        githubDialogBinding.ghRepoName.setText(saveRepo);

        String saveFilename = sharedPreferences.getString("filename", "");
        githubDialogBinding.ghFilename.setText(saveFilename);

        githubDialogBinding.close.setOnClickListener(v -> bottomSheetDialog.dismiss());
        githubDialogBinding.clear.setOnClickListener(v -> {

            githubDialogBinding.ghToken.setText("");
            githubDialogBinding.ghUsername.setText("");
            githubDialogBinding.ghRepoName.setText("");
            githubDialogBinding.ghFilename.setText("");

            editor.putString("token", "");
            editor.putString("user", "");
            editor.putString("repo", "");
            editor.putString("filename", "");
            editor.apply();

        });

        githubDialogBinding.save.setOnClickListener(v -> {
            String ghToken = githubDialogBinding.ghToken.getText() != null? githubDialogBinding.ghToken.getText().toString() : "";
            String ghUsername = githubDialogBinding.ghUsername.getText() != null? githubDialogBinding.ghUsername.getText().toString() : "";
            String ghRepoName = githubDialogBinding.ghRepoName.getText() != null? githubDialogBinding.ghRepoName.getText().toString() : "";
            String ghFilename = githubDialogBinding.ghFilename.getText() != null? githubDialogBinding.ghFilename.getText().toString() : "";

            editor.putString("token", ghToken);
            editor.putString("user", ghUsername);
            editor.putString("repo", ghRepoName);
            editor.putString("filename", ghFilename);
            editor.apply();
            bottomSheetDialog.dismiss();

        });
    }


    private void importData() {
        Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
        intent.setType("*/*");
        pickFile.launch(intent);
    }

    private final ActivityResultLauncher<Intent> pickFile = registerForActivityResult(
            new ActivityResultContracts.StartActivityForResult(), result -> {
                if (result.getResultCode() == RESULT_OK && result.getData() != null) {
                    Uri uri = result.getData().getData();
                    readDataFromUri(uri);
                }
            });

    private void readDataFromUri(Uri uri) {
        if (uri == null) return;

        StringBuilder stringBuilder = new StringBuilder();
        try (InputStream inputStream = getContentResolver().openInputStream(uri);
             BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {

            String line;
            while ((line = reader.readLine()) != null) {
                stringBuilder.append(line);
            }
            binding.dataFile.setText(stringBuilder.toString());
        } catch (IOException e) {
            showMessage("Error reading file: " + e.getMessage());
        }
    }

    private void showMessage(String message) {
        Snackbar.make(binding.getRoot(), message, Snackbar.LENGTH_SHORT).show();
    }
}
package com.material3.material3;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.splashscreen.SplashScreen;

import android.content.Intent;
import android.content.SharedPreferences;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.view.View;
import android.view.ViewTreeObserver;
import android.widget.FrameLayout;

import com.google.android.material.bottomsheet.BottomSheetBehavior;
import com.google.android.material.bottomsheet.BottomSheetDialog;
import com.google.android.material.dialog.MaterialAlertDialogBuilder;
import com.google.android.material.snackbar.Snackbar;
import com.material3.material3.databinding.ActivityCredBinding;
import com.material3.material3.databinding.ActivityMainBinding;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class MainActivity extends AppCompatActivity {

    private ActivityMainBinding binding;
    private GithubUpdater api;
    private ExecutorService executorService;
    private SharedPreferences sharedPreferences;
    private SharedPreferences.Editor editor;
    private BottomSheetDialog bottomSheetDialog;
    private Handler handler;
    private AlertDialog alertDialog;
    private final int delayMills = 2000;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        var splashScreen = SplashScreen.installSplashScreen(this);
        super.onCreate(savedInstanceState);
        splashScreen.setKeepOnScreenCondition(() -> false);
        binding = ActivityMainBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());
        final View content = findViewById(android.R.id.content);
        content.getViewTreeObserver().addOnPreDrawListener(
                new ViewTreeObserver.OnPreDrawListener() {
                    @Override
                    public boolean onPreDraw() {
                        content.getViewTreeObserver().removeOnPreDrawListener(this);
                        return true;
                    }
                });
        initializeTheme();
        setupClickListeners();
    }


    private void initializeTheme() {
        api = new GithubUpdater();
        executorService = Executors.newSingleThreadExecutor();
        bottomSheetDialog = new BottomSheetDialog(this);
        handler = new Handler(Looper.getMainLooper());
        sharedPreferences = getSharedPreferences("getDefaultSharedPreferences", MODE_PRIVATE);
        editor = sharedPreferences.edit();
    }

    private void setupClickListeners() {
        binding.setupBtn.setOnClickListener(v -> setGithubCredentials());
        binding.updateBtn.setOnClickListener(v -> showConfirmationDialog());
        binding.importBtn.setOnClickListener(v -> showImportFileDialog());
    }

    private void showImportFileDialog() {
        if (alertDialog != null && alertDialog.isShowing()) {
            alertDialog.dismiss();
        }

        String title = "Import Selection";
        String message = """
                Choose your preferred method for importing data:
                
                - Offline Import: Use this option to import data from local files stored on your device. \
                Ideal for secure environments or when internet access is limited.
                
                - Online Import: Connect to cloud services or online databases to import data directly. \
                Perfect for accessing the latest information and collaborating in real-time.
                
                Select the method that best suits your needs and workflow.""";

        alertDialog = new MaterialAlertDialogBuilder(this)
                .setTitle(title)
                .setMessage(message)
                .setPositiveButton("ONLINE", (dialog, which) -> {
                    binding.lottie.setVisibility(View.VISIBLE);
                    executorService.execute(() -> handler.postDelayed(this::executeReceiveFile, delayMills));
                    alertDialog.dismiss();
                })
                .setNeutralButton("OFFLINE", (dialog, which) -> {
                    importData();
                    alertDialog.dismiss();
                })
                .create();

        alertDialog.show();
    }

    private void showConfirmationDialog() {
        if (alertDialog != null && alertDialog.isShowing()) {
            alertDialog.dismiss();
        }

        String title = "Verify Details";
        String message = """
                Ensure that the following information is correct before proceeding:
                
                - Token: Your authentication token.
                - Username: Your GitHub username.
                - Repo Name: The name of the repository.
                - Filename: The name of the file to be sent.
                
                Double-check these details to avoid errors during the data transfer.""";

        alertDialog = new MaterialAlertDialogBuilder(this)
                .setTitle(title)
                .setMessage(message)
                .setPositiveButton("CONFIRM", (dialog, which) -> {
                    binding.lottie.setVisibility(View.VISIBLE);
                    executorService.execute(() -> handler.postDelayed(this::executePushFile, delayMills));
                    alertDialog.dismiss();
                })
                .setNeutralButton("CANCEL", (dialog, which) -> alertDialog.dismiss())
                .setCancelable(false)
                .create();

        alertDialog.show();
    }


    private void executePushFile() {
        String token = sharedPreferences.getString("token", "");
        String username = sharedPreferences.getString("user", "");
        String repo = sharedPreferences.getString("repo", "");
        String filename = sharedPreferences.getString("filename", "");
        String branch = "main";
        String content = binding.dataFile.getText() != null ? binding.dataFile.getText().toString() : "";

        if (token.isEmpty() || username.isEmpty() || repo.isEmpty() || filename.isEmpty() || content.isEmpty()) {
            showMessage("Error: All fields must be filled out.");
            binding.lottie.setVisibility(View.GONE);
            return;
        }

        binding.lottie.setVisibility(View.VISIBLE);

        api.pushFileToGithub(token, username, repo, branch, filename, content, new GithubUpdater.PushFileCallback() {
            @Override
            public void onSuccess(String result) {
                binding.dataFile.setText("");
                binding.lottie.setVisibility(View.GONE);
                showMessage("Update Successful!");
            }

            @Override
            public void onError(String error) {
                binding.dataFile.setText(error);
                binding.lottie.setVisibility(View.GONE);
            }
        });
    }

    private void executeReceiveFile() {
        String token = sharedPreferences.getString("token", "");
        String username = sharedPreferences.getString("user", "");
        String repo = sharedPreferences.getString("repo", "");
        String filename = sharedPreferences.getString("filename", "");
        String branch = "main";

        if (token.isEmpty() || username.isEmpty() || repo.isEmpty() || filename.isEmpty()) {
            showMessage("Error: All fields must be filled out.");
            binding.lottie.setVisibility(View.GONE);
            return;
        }

        api.getFileFromGithub(token, username, repo, branch, filename, new GithubUpdater.FileRetrievalCallback() {
            @Override
            public void onSuccess(String result) {
                binding.lottie.setVisibility(View.GONE);
                binding.dataFile.setText(result);
                showMessage("Received Successful!");
            }

            @Override
            public void onError(String error) {
                binding.lottie.setVisibility(View.GONE);
                binding.dataFile.setText(error);
            }
        });
    }

    private void setGithubCredentials() {
        ActivityCredBinding githubDialogBinding = ActivityCredBinding.inflate(getLayoutInflater());
        bottomSheetDialog.setContentView(githubDialogBinding.getRoot());
        bottomSheetDialog.setCancelable(false);
        bottomSheetDialog.show();

        BottomSheetBehavior<FrameLayout> bottomSheetBehavior = bottomSheetDialog.getBehavior();
        bottomSheetBehavior.setState(BottomSheetBehavior.STATE_EXPANDED);

        String saveToken = sharedPreferences.getString("token", "");
        githubDialogBinding.ghToken.setText(saveToken);

        String saveUser = sharedPreferences.getString("user", "");
        githubDialogBinding.ghUsername.setText(saveUser);

        String saveRepo = sharedPreferences.getString("repo", "");
        githubDialogBinding.ghRepoName.setText(saveRepo);

        String saveFilename = sharedPreferences.getString("filename", "");
        githubDialogBinding.ghFilename.setText(saveFilename);

        githubDialogBinding.close.setOnClickListener(v -> bottomSheetDialog.dismiss());
        githubDialogBinding.clear.setOnClickListener(v -> {

            githubDialogBinding.ghToken.setText("");
            githubDialogBinding.ghUsername.setText("");
            githubDialogBinding.ghRepoName.setText("");
            githubDialogBinding.ghFilename.setText("");

            editor.putString("token", "");
            editor.putString("user", "");
            editor.putString("repo", "");
            editor.putString("filename", "");
            editor.apply();

        });

        githubDialogBinding.save.setOnClickListener(v -> {
            String ghToken = githubDialogBinding.ghToken.getText() != null? githubDialogBinding.ghToken.getText().toString() : "";
            String ghUsername = githubDialogBinding.ghUsername.getText() != null? githubDialogBinding.ghUsername.getText().toString() : "";
            String ghRepoName = githubDialogBinding.ghRepoName.getText() != null? githubDialogBinding.ghRepoName.getText().toString() : "";
            String ghFilename = githubDialogBinding.ghFilename.getText() != null? githubDialogBinding.ghFilename.getText().toString() : "";

            editor.putString("token", ghToken);
            editor.putString("user", ghUsername);
            editor.putString("repo", ghRepoName);
            editor.putString("filename", ghFilename);
            editor.apply();
            bottomSheetDialog.dismiss();

        });
    }


    private void importData() {
        Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
        intent.setType("*/*");
        pickFile.launch(intent);
    }

    private final ActivityResultLauncher<Intent> pickFile = registerForActivityResult(
            new ActivityResultContracts.StartActivityForResult(), result -> {
                if (result.getResultCode() == RESULT_OK && result.getData() != null) {
                    Uri uri = result.getData().getData();
                    readDataFromUri(uri);
                }
            });

    private void readDataFromUri(Uri uri) {
        if (uri == null) return;

        StringBuilder stringBuilder = new StringBuilder();
        try (InputStream inputStream = getContentResolver().openInputStream(uri);
             BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {

            String line;
            while ((line = reader.readLine()) != null) {
                stringBuilder.append(line);
            }
            binding.dataFile.setText(stringBuilder.toString());
        } catch (IOException e) {
            showMessage("Error reading file: " + e.getMessage());
        }
    }

    private void showMessage(String message) {
        Snackbar.make(binding.getRoot(), message, Snackbar.LENGTH_SHORT).show();
    }
}
package com.material3.material3;

import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.splashscreen.SplashScreen;

import android.content.Intent;
import android.content.SharedPreferences;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.view.View;
import android.view.ViewTreeObserver;
import android.widget.FrameLayout;

import com.google.android.material.bottomsheet.BottomSheetBehavior;
import com.google.android.material.bottomsheet.BottomSheetDialog;
import com.google.android.material.dialog.MaterialAlertDialogBuilder;
import com.google.android.material.snackbar.Snackbar;
import com.material3.material3.databinding.ActivityCredBinding;
import com.material3.material3.databinding.ActivityMainBinding;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class MainActivity extends AppCompatActivity {

    private ActivityMainBinding binding;
    private GithubUpdater api;
    private ExecutorService executorService;
    private SharedPreferences sharedPreferences;
    private SharedPreferences.Editor editor;
    private BottomSheetDialog bottomSheetDialog;
    private Handler handler;
    private AlertDialog alertDialog;
    private final int delayMills = 2000;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        var splashScreen = SplashScreen.installSplashScreen(this);
        super.onCreate(savedInstanceState);
        splashScreen.setKeepOnScreenCondition(() -> false);
        binding = ActivityMainBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());
        final View content = findViewById(android.R.id.content);
        content.getViewTreeObserver().addOnPreDrawListener(
                new ViewTreeObserver.OnPreDrawListener() {
                    @Override
                    public boolean onPreDraw() {
                        content.getViewTreeObserver().removeOnPreDrawListener(this);
                        return true;
                    }
                });
        initializeTheme();
        setupClickListeners();
    }


    private void initializeTheme() {
        api = new GithubUpdater();
        executorService = Executors.newSingleThreadExecutor();
        bottomSheetDialog = new BottomSheetDialog(this);
        handler = new Handler(Looper.getMainLooper());
        sharedPreferences = getSharedPreferences("getDefaultSharedPreferences", MODE_PRIVATE);
        editor = sharedPreferences.edit();
    }

    private void setupClickListeners() {
        binding.setupBtn.setOnClickListener(v -> setGithubCredentials());
        binding.updateBtn.setOnClickListener(v -> showConfirmationDialog());
        binding.importBtn.setOnClickListener(v -> showImportFileDialog());
    }

    private void showImportFileDialog() {
        if (alertDialog != null && alertDialog.isShowing()) {
            alertDialog.dismiss();
        }

        String title = "Import Selection";
        String message = """
                Choose your preferred method for importing data:
                
                - Offline Import: Use this option to import data from local files stored on your device. \
                Ideal for secure environments or when internet access is limited.
                
                - Online Import: Connect to cloud services or online databases to import data directly. \
                Perfect for accessing the latest information and collaborating in real-time.
                
                Select the method that best suits your needs and workflow.""";

        alertDialog = new MaterialAlertDialogBuilder(this)
                .setTitle(title)
                .setMessage(message)
                .setPositiveButton("ONLINE", (dialog, which) -> {
                    binding.lottie.setVisibility(View.VISIBLE);
                    executorService.execute(() -> handler.postDelayed(this::executeReceiveFile, delayMills));
                    alertDialog.dismiss();
                })
                .setNeutralButton("OFFLINE", (dialog, which) -> {
                    importData();
                    alertDialog.dismiss();
                })
                .create();

        alertDialog.show();
    }

    private void showConfirmationDialog() {
        if (alertDialog != null && alertDialog.isShowing()) {
            alertDialog.dismiss();
        }

        String title = "Verify Details";
        String message = """
                Ensure that the following information is correct before proceeding:
                
                - Token: Your authentication token.
                - Username: Your GitHub username.
                - Repo Name: The name of the repository.
                - Filename: The name of the file to be sent.
                
                Double-check these details to avoid errors during the data transfer.""";

        alertDialog = new MaterialAlertDialogBuilder(this)
                .setTitle(title)
                .setMessage(message)
                .setPositiveButton("CONFIRM", (dialog, which) -> {
                    binding.lottie.setVisibility(View.VISIBLE);
                    executorService.execute(() -> handler.postDelayed(this::executePushFile, delayMills));
                    alertDialog.dismiss();
                })
                .setNeutralButton("CANCEL", (dialog, which) -> alertDialog.dismiss())
                .setCancelable(false)
                .create();

        alertDialog.show();
    }


    private void executePushFile() {
        String token = sharedPreferences.getString("token", "");
        String username = sharedPreferences.getString("user", "");
        String repo = sharedPreferences.getString("repo", "");
        String filename = sharedPreferences.getString("filename", "");
        String branch = "main";
        String content = binding.dataFile.getText() != null ? binding.dataFile.getText().toString() : "";

        if (token.isEmpty() || username.isEmpty() || repo.isEmpty() || filename.isEmpty() || content.isEmpty()) {
            showMessage("Error: All fields must be filled out.");
            binding.lottie.setVisibility(View.GONE);
            return;
        }

        binding.lottie.setVisibility(View.VISIBLE);

        api.pushFileToGithub(token, username, repo, branch, filename, content, new GithubUpdater.PushFileCallback() {
            @Override
            public void onSuccess(String result) {
                binding.dataFile.setText("");
                binding.lottie.setVisibility(View.GONE);
                showMessage("Update Successful!");
            }

            @Override
            public void onError(String error) {
                binding.dataFile.setText(error);
                binding.lottie.setVisibility(View.GONE);
            }
        });
    }

    private void executeReceiveFile() {
        String token = sharedPreferences.getString("token", "");
        String username = sharedPreferences.getString("user", "");
        String repo = sharedPreferences.getString("repo", "");
        String filename = sharedPreferences.getString("filename", "");
        String branch = "main";

        if (token.isEmpty() || username.isEmpty() || repo.isEmpty() || filename.isEmpty()) {
            showMessage("Error: All fields must be filled out.");
            binding.lottie.setVisibility(View.GONE);
            return;
        }

        api.getFileFromGithub(token, username, repo, branch, filename, new GithubUpdater.FileRetrievalCallback() {
            @Override
            public void onSuccess(String result) {
                binding.lottie.setVisibility(View.GONE);
                binding.dataFile.setText(result);
                showMessage("Received Successful!");
            }

            @Override
            public void onError(String error) {
                binding.lottie.setVisibility(View.GONE);
                binding.dataFile.setText(error);
            }
        });
    }

    private void setGithubCredentials() {
        ActivityCredBinding githubDialogBinding = ActivityCredBinding.inflate(getLayoutInflater());
        bottomSheetDialog.setContentView(githubDialogBinding.getRoot());
        bottomSheetDialog.setCancelable(false);
        bottomSheetDialog.show();

        BottomSheetBehavior<FrameLayout> bottomSheetBehavior = bottomSheetDialog.getBehavior();
        bottomSheetBehavior.setState(BottomSheetBehavior.STATE_EXPANDED);

        String saveToken = sharedPreferences.getString("token", "");
        githubDialogBinding.ghToken.setText(saveToken);

        String saveUser = sharedPreferences.getString("user", "");
        githubDialogBinding.ghUsername.setText(saveUser);

        String saveRepo = sharedPreferences.getString("repo", "");
        githubDialogBinding.ghRepoName.setText(saveRepo);

        String saveFilename = sharedPreferences.getString("filename", "");
        githubDialogBinding.ghFilename.setText(saveFilename);

        githubDialogBinding.close.setOnClickListener(v -> bottomSheetDialog.dismiss());
        githubDialogBinding.clear.setOnClickListener(v -> {

            githubDialogBinding.ghToken.setText("");
            githubDialogBinding.ghUsername.setText("");
            githubDialogBinding.ghRepoName.setText("");
            githubDialogBinding.ghFilename.setText("");

            editor.putString("token", "");
            editor.putString("user", "");
            editor.putString("repo", "");
            editor.putString("filename", "");
            editor.apply();

        });

        githubDialogBinding.save.setOnClickListener(v -> {
            String ghToken = githubDialogBinding.ghToken.getText() != null? githubDialogBinding.ghToken.getText().toString() : "";
            String ghUsername = githubDialogBinding.ghUsername.getText() != null? githubDialogBinding.ghUsername.getText().toString() : "";
            String ghRepoName = githubDialogBinding.ghRepoName.getText() != null? githubDialogBinding.ghRepoName.getText().toString() : "";
            String ghFilename = githubDialogBinding.ghFilename.getText() != null? githubDialogBinding.ghFilename.getText().toString() : "";

            editor.putString("token", ghToken);
            editor.putString("user", ghUsername);
            editor.putString("repo", ghRepoName);
            editor.putString("filename", ghFilename);
            editor.apply();
            bottomSheetDialog.dismiss();

        });
    }


    private void importData() {
        Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
        intent.setType("*/*");
        pickFile.launch(intent);
    }

    private final ActivityResultLauncher<Intent> pickFile = registerForActivityResult(
            new ActivityResultContracts.StartActivityForResult(), result -> {
                if (result.getResultCode() == RESULT_OK && result.getData() != null) {
                    Uri uri = result.getData().getData();
                    readDataFromUri(uri);
                }
            });

    private void readDataFromUri(Uri uri) {
        if (uri == null) return;

        StringBuilder stringBuilder = new StringBuilder();
        try (InputStream inputStream = getContentResolver().openInputStream(uri);
             BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {

            String line;
            while ((line = reader.readLine()) != null) {
                stringBuilder.append(line);
            }
            binding.dataFile.setText(stringBuilder.toString());
        } catch (IOException e) {
            showMessage("Error reading file: " + e.getMessage());
        }
    }

    private void showMessage(String message) {
        Snackbar.make(binding.getRoot(), message, Snackbar.LENGTH_SHORT).show();
    }
}
