package com.cebp.updater;\n\nimport androidx.activity.result.ActivityResultLauncher;\nimport androidx.activity.result.contract.ActivityResultContracts;\nimport androidx.appcompat.app.AlertDialog;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.core.splashscreen.SplashScreen;\n\nimport android.annotation.SuppressLint;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.graphics.Color;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Looper;\nimport android.view.View;\nimport android.view.ViewTreeObserver;\nimport android.widget.FrameLayout;\n\nimport com.google.android.material.bottomsheet.BottomSheetBehavior;\nimport com.google.android.material.bottomsheet.BottomSheetDialog;\nimport com.google.android.material.dialog.MaterialAlertDialogBuilder;\nimport com.google.android.material.snackbar.Snackbar;\nimport com.cebp.updater.databinding.ActivityCredBinding;\nimport com.cebp.updater.databinding.ActivityMainBinding;\n\nimport java.io.BufferedReader;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class MainActivity extends AppCompatActivity {\n\n    private ActivityMainBinding binding;\n    private GithubApi api;\n    private ExecutorService executorService;\n    private SharedPreferences sharedPreferences;\n    private SharedPreferences.Editor editor;\n    private BottomSheetDialog bottomSheetDialog;\n    private Handler handler;\n    private AlertDialog alertDialog;\n    private final int delayMills = 2000;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        var splashScreen = SplashScreen.installSplashScreen(this);\n        super.onCreate(savedInstanceState);\n        splashScreen.setKeepOnScreenCondition(() -> false);\n        binding = ActivityMainBinding.inflate(getLayoutInflater());\n        setContentView(binding.getRoot());\n        final View content = findViewById(android.R.id.content);\n        content.getViewTreeObserver().addOnPreDrawListener(\n                new ViewTreeObserver.OnPreDrawListener() {\n                    @Override\n                    public boolean onPreDraw() {\n                        content.getViewTreeObserver().removeOnPreDrawListener(this);\n                        return true;\n                    }\n                });\n        initializeTheme();\n        setupClickListeners();\n    }\n\n\n    @SuppressLint(\"SetJavaScriptEnabled\")\n    private void initializeTheme() {\n        api = new GithubApi();\n        executorService = Executors.newSingleThreadExecutor();\n        bottomSheetDialog = new BottomSheetDialog(this);\n\n        binding.webView.getSettings().setJavaScriptEnabled(true);\n        binding.webView.getSettings().setDomStorageEnabled(true);\n\n        binding.webView.getSettings().setUseWideViewPort(true);\n        binding.webView.getSettings().setLoadWithOverviewMode(true);\n        binding.webView.getSettings().setSupportZoom(true);\n        binding.webView.getSettings().setBuiltInZoomControls(true);\n        binding.webView.getSettings().setDisplayZoomControls(false);\n\n        // Enable smooth scrolling\n        binding.webView.setScrollBarStyle(View.SCROLLBARS_INSIDE_OVERLAY);\n        binding.webView.setScrollbarFadingEnabled(false);\n\n        // Load the HTML content\n        String formattedHtml = generateHtml(\"\");\n        binding.webView.loadDataWithBaseURL(\"file:///android_asset/\", formattedHtml, \"text/html\", \"UTF-8\", null);\n\n        handler = new Handler(Looper.getMainLooper());\n        sharedPreferences = getSharedPreferences(\"getDefaultSharedPreferences\", MODE_PRIVATE);\n        editor = sharedPreferences.edit();\n    }\n\n    private void setupClickListeners() {\n        binding.setupBtn.setOnClickListener(v -> setGithubCredentials());\n        binding.updateBtn.setOnClickListener(v -> showConfirmationDialog());\n        binding.importBtn.setOnClickListener(v -> showImportFileDialog());\n    }\n\n    private void showImportFileDialog() {\n        if (alertDialog != null && alertDialog.isShowing()) {\n            alertDialog.dismiss();\n        }\n\n        String title = \"Import Selection\";\n        String message = \"\"\"\n                Choose your preferred method for importing data:\n                \n                - Offline Import: Use this option to import data from local files stored on your device. \\\n                Ideal for secure environments or when internet access is limited.\n                \n                - Online Import: Connect to cloud services or online databases to import data directly. \\\n                Perfect for accessing the latest information and collaborating in real-time.\n                \n                Select the method that best suits your needs and workflow.\"\"\";\n\n        alertDialog = new MaterialAlertDialogBuilder(this)\n                .setTitle(title)\n                .setMessage(message)\n                .setPositiveButton(\"ONLINE\", (dialog, which) -> {\n                    binding.lottie.setVisibility(View.VISIBLE);\n                    executorService.execute(() -> handler.postDelayed(this::executeReceiveFile, delayMills));\n                    alertDialog.dismiss();\n                })\n                .setNeutralButton(\"OFFLINE\", (dialog, which) -> {\n                    importData();\n                    alertDialog.dismiss();\n                })\n                .create();\n\n        alertDialog.show();\n    }\n\n    private void showConfirmationDialog() {\n        if (alertDialog != null && alertDialog.isShowing()) {\n            alertDialog.dismiss();\n        }\n\n        String title = \"Verify Details\";\n        String message = \"\"\"\n                Ensure that the following information is correct before proceeding:\n                \n                - Token: Your authentication token.\n                - Username: Your GitHub username.\n                - Repo Name: The name of the repository.\n                - Filename: The name of the file to be sent.\n                \n                Double-check these details to avoid errors during the data transfer.\"\"\";\n\n        alertDialog = new MaterialAlertDialogBuilder(this)\n                .setTitle(title)\n                .setMessage(message)\n                .setPositiveButton(\"CONFIRM\", (dialog, which) -> {\n                    binding.lottie.setVisibility(View.VISIBLE);\n                    executorService.execute(() -> handler.postDelayed(this::executePushFile, delayMills));\n                    alertDialog.dismiss();\n                })\n                .setNeutralButton(\"CANCEL\", (dialog, which) -> alertDialog.dismiss())\n                .setCancelable(false)\n                .create();\n\n        alertDialog.show();\n    }\n\n\n    private void executePushFile() {\n        String token = sharedPreferences.getString(\"token\", \"\");\n        String username = sharedPreferences.getString(\"user\", \"\");\n        String repo = sharedPreferences.getString(\"repo\", \"\");\n        String filename = sharedPreferences.getString(\"filename\", \"\");\n        String branch = \"main\";\n\n        if (token.isEmpty() || username.isEmpty() || repo.isEmpty() || filename.isEmpty()) {\n            showMessage(\"Error: All fields must be filled out.\");\n            binding.lottie.setVisibility(View.GONE);\n            return;\n        }\n\n        binding.lottie.setVisibility(View.VISIBLE);\n\n        // 📝 Extract content from WebView\n        binding.webView.evaluateJavascript(\"(function() { return document.getElementById('text_input').value.trim(); })();\", value -> {\n            if (value == null || value.equals(\"null\") || value.trim().isEmpty()) {\n                showMessage(\"Error: No content to upload.\");\n                binding.lottie.setVisibility(View.GONE);\n                return;\n            }\n\n            // Remove extra quotes from JavaScript response\n            String webViewContent = value.replaceAll(\"^\\\"|\\\"$\", \"\");\n\n            // 🔄 Push content to GitHub\n            api.putFileToGithub(token, username, repo, branch, filename, webViewContent, new GithubApi.PushFileCallback() {\n                @Override\n                public void onSuccess(String result) {\n                    binding.lottie.setVisibility(View.GONE);\n                    showMessage(\"Update Successful!\");\n\n                    // 🧹 Reset WebView after successful push\n                    binding.webView.clearHistory();\n                    binding.webView.clearCache(true);\n                    binding.webView.loadUrl(\"about:blank\");\n\n                    new Handler().postDelayed(() -> {\n                        String formattedHtml = generateHtml(result);\n                        binding.webView.loadDataWithBaseURL(\"file:///android_asset/\", formattedHtml, \"text/html\", \"UTF-8\", null);\n                    }, 100);\n                }\n\n                @Override\n                public void onError(String error) {\n                    binding.lottie.setVisibility(View.GONE);\n                    showMessage(\"Error: \" + error);\n                }\n            });\n        });\n    }\n\n\n\n    private void executeReceiveFile() {\n        String token = sharedPreferences.getString(\"token\", \"\");\n        String username = sharedPreferences.getString(\"user\", \"\");\n        String repo = sharedPreferences.getString(\"repo\", \"\");\n        String filename = sharedPreferences.getString(\"filename\", \"\");\n        String branch = \"main\";\n\n        if (token.isEmpty() || username.isEmpty() || repo.isEmpty() || filename.isEmpty()) {\n            showMessage(\"Error: All fields must be filled out.\");\n            binding.lottie.setVisibility(View.GONE);\n            return;\n        }\n\n        binding.lottie.setVisibility(View.VISIBLE);\n\n        api.getFileFromGithub(token, username, repo, branch, filename, new GithubApi.FileRetrievalCallback() {\n            @Override\n            public void onSuccess(String result) {\n                binding.lottie.setVisibility(View.GONE);\n                showMessage(\"Received Successfully!\");\n\n                // 🧹 Completely reset WebView\n                binding.webView.clearHistory();\n                binding.webView.clearCache(true);\n                binding.webView.loadUrl(\"about:blank\");\n\n                new Handler().postDelayed(() -> {\n                    String formattedHtml = generateHtml(result);\n                    binding.webView.loadDataWithBaseURL(\"file:///android_asset/\", formattedHtml, \"text/html\", \"UTF-8\", null);\n                }, 100);\n            }\n\n\n            @Override\n            public void onError(String error) {\n                binding.lottie.setVisibility(View.GONE);\n                showMessage(\"Error: \" + error);\n\n                // 🧹 Completely reset WebView\n                binding.webView.clearHistory();\n                binding.webView.clearCache(true);\n                binding.webView.loadUrl(\"about:blank\");\n\n                // Show error message in WebView with styling\n                new Handler().postDelayed(() -> {\n                    String formattedHtml = generateHtml(\"\u003Cp style='color:red;'>Error loading file: \" + error + \"\u003C/p>\");\n                    binding.webView.loadDataWithBaseURL(\"file:///android_asset/\", formattedHtml, \"text/html\", \"UTF-8\", null);\n                }, 100);\n\n            }\n        });\n    }\n\n\n    private void setGithubCredentials() {\n        ActivityCredBinding githubDialogBinding = ActivityCredBinding.inflate(getLayoutInflater());\n        bottomSheetDialog.setContentView(githubDialogBinding.getRoot());\n        bottomSheetDialog.setCancelable(false);\n        bottomSheetDialog.show();\n\n        BottomSheetBehavior\u003CFrameLayout> bottomSheetBehavior = bottomSheetDialog.getBehavior();\n        bottomSheetBehavior.setState(BottomSheetBehavior.STATE_EXPANDED);\n\n        String saveToken = sharedPreferences.getString(\"token\", \"\");\n        githubDialogBinding.ghToken.setText(saveToken);\n\n        String saveUser = sharedPreferences.getString(\"user\", \"\");\n        githubDialogBinding.ghUsername.setText(saveUser);\n\n        String saveRepo = sharedPreferences.getString(\"repo\", \"\");\n        githubDialogBinding.ghRepoName.setText(saveRepo);\n\n        String saveFilename = sharedPreferences.getString(\"filename\", \"\");\n        githubDialogBinding.ghFilename.setText(saveFilename);\n\n        githubDialogBinding.close.setOnClickListener(v -> bottomSheetDialog.dismiss());\n        githubDialogBinding.clear.setOnClickListener(v -> {\n\n            githubDialogBinding.ghToken.setText(\"\");\n            githubDialogBinding.ghUsername.setText(\"\");\n            githubDialogBinding.ghRepoName.setText(\"\");\n            githubDialogBinding.ghFilename.setText(\"\");\n\n            editor.putString(\"token\", \"\");\n            editor.putString(\"user\", \"\");\n            editor.putString(\"repo\", \"\");\n            editor.putString(\"filename\", \"\");\n            editor.apply();\n\n        });\n\n        githubDialogBinding.save.setOnClickListener(v -> {\n            String ghToken = githubDialogBinding.ghToken.getText() != null? githubDialogBinding.ghToken.getText().toString() : \"\";\n            String ghUsername = githubDialogBinding.ghUsername.getText() != null? githubDialogBinding.ghUsername.getText().toString() : \"\";\n            String ghRepoName = githubDialogBinding.ghRepoName.getText() != null? githubDialogBinding.ghRepoName.getText().toString() : \"\";\n            String ghFilename = githubDialogBinding.ghFilename.getText() != null? githubDialogBinding.ghFilename.getText().toString() : \"\";\n\n            editor.putString(\"token\", ghToken);\n            editor.putString(\"user\", ghUsername);\n            editor.putString(\"repo\", ghRepoName);\n            editor.putString(\"filename\", ghFilename);\n            editor.apply();\n            bottomSheetDialog.dismiss();\n\n        });\n    }\n\n\n    private void importData() {\n        Intent intent = new Intent(Intent.ACTION_GET_CONTENT);\n        intent.setType(\"*/*\");\n        pickFile.launch(intent);\n    }\n\n    private final ActivityResultLauncher\u003CIntent> pickFile = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {\n        if (result.getResultCode() == RESULT_OK && result.getData() != null) {\n            Uri uri = result.getData().getData();\n            readDataFromUri(uri);\n        }\n    });\n\n    private void readDataFromUri(Uri uri) {\n        if (uri == null) return;\n\n        StringBuilder stringBuilder = new StringBuilder();\n        try (InputStream inputStream = getContentResolver().openInputStream(uri);\n             BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {\n\n            String line;\n            while ((line = reader.readLine()) != null) {\n                stringBuilder.append(line).append(\"\\n\");\n            }\n            new Handler().postDelayed(() -> {\n                String formattedHtml = generateHtml(stringBuilder.toString());\n                binding.webView.loadDataWithBaseURL(\"file:///android_asset/\", formattedHtml, \"text/html\", \"UTF-8\", null);\n            }, 100);\n        } catch (IOException e) {\n            showMessage(\"Error reading file: \" + e.getMessage());\n        }\n    }\n\n    private String generateHtml(String content) {\n        try (InputStream inputStream = getAssets().open(\"template.html\");\n             ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {\n\n            byte[] buffer = new byte[1024]; // Read in chunks of 1 KB\n            int bytesRead;\n            while ((bytesRead = inputStream.read(buffer)) != -1) {\n                outputStream.write(buffer, 0, bytesRead);\n            }\n\n            // ✅ Compatible with API 26+ (Replaces API 33-only method)\n            String string = \"UTF-8\";\n            String htmlTemplate = outputStream.toString(string);\n\n            // Escape special characters properly\n            String escapedContent = content.replace(\"&\", \"&amp;\")\n                    .replace(\"\u003C\", \"&lt;\")\n                    .replace(\">\", \"&gt;\")\n                    .replace(\"\\\"\", \"&quot;\")\n                    .replace(\"'\", \"&#39;\")\n                    .replace(\"\\n\", \"&#10;\"); // Preserve new lines\n\n            return htmlTemplate.replace(\"{{CONTENT}}\", escapedContent);\n        } catch (IOException e) {\n            return \"\u003Cp style='color:red;'>Error loading template\u003C/p>\";\n        }\n    }\n\n\n    private void showMessage(String message) {\n        View snackBarView = binding.snackBarView;\n        Snackbar snackbar = Snackbar.make(snackBarView, message, Snackbar.LENGTH_SHORT);\n        snackbar.setAnchorView(snackBarView);\n        snackbar.setBackgroundTint(Color.DKGRAY);\n        snackbar.setTextColor(Color.WHITE);\n        snackbar.show();\n    }\n\n}