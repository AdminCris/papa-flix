#!/bin/bash&#10;ln -fs /usr/share/zoneinfo/Asia/Manila /etc/localtime&#10;#change this according to your database details&#10;#Database Details&#10;dbhost=&#39;209.159.148.132&#39;;&#10;dbuser=&#39;paidjcmv_test123&#39;;&#10;dbpass=&#39;paidjcmv_test123&#39;;&#10;dbname=&#39;paidjcmv_test123&#39;;&#10;dbport=&#39;3306&#39;;&#10;RED=&#39;\u001B[01;31m&#39;;&#10;RESET=&#39;\u001B[0m&#39;;&#10;GREEN=&#39;\u001B[01;32m&#39;;&#10;WHITE=&#39;\u001B[01;37m&#39;;&#10;YELLOW=&#39;\u001B[00;33m&#39;;&#10;&#10;fun_bar (){&#10;    comando[0]=&quot;$1&quot;&#10;    comando[1]=&quot;$2&quot;&#10;    ([[ -e $HOME/fim ]] &amp;&amp; rm $HOME/fim&#10;        ${comando[0]} -y &gt; /dev/null 2&gt;&amp;1&#10;        ${comando[1]} -y &gt; /dev/null 2&gt;&amp;1&#10;        touch $HOME/fim&#10;    ) &gt; /dev/null 2&gt;&amp;1 &amp;&#10;    tput civis&#10;    echo -ne &quot;  \u001B[1;33mOPENVPN | STUNNEL \u001B[1;37m- \u001B[1;33m[&quot;&#10;    while true; do&#10;        for((i=0; i&lt;18; i++)); do&#10;        echo -ne &quot;\u001B[1;31m#&quot;&#10;        sleep 0.1s&#10;    done&#10;    [[ -e $HOME/fim ]] &amp;&amp; rm $HOME/fim &amp;&amp; break&#10;    echo -e &quot;\u001B[1;33m]&quot;&#10;    sleep 1s&#10;    tput cuu1&#10;    tput dl1&#10;    echo -ne &quot;  \u001B[1;33mOPENVPN | STUNNEL \u001B[1;37m- \u001B[1;33m[&quot;&#10;done&#10;    echo -e &quot;\u001B[1;33m]\u001B[1;37m -\u001B[1;32m INSTALLED !\u001B[1;37m&quot;&#10;    tput cnorm&#10;}&#10;&#10;&#10;fun_bar2 () {&#10;comando[0]=&quot;$1&quot;&#10;comando[1]=&quot;$2&quot;&#10; (&#10;[[ -e $HOME/fim ]] &amp;&amp; rm $HOME/fim&#10;${comando[0]} -y &gt; /dev/null 2&gt;&amp;1&#10;${comando[1]} -y &gt; /dev/null 2&gt;&amp;1&#10;touch $HOME/fim&#10; ) &gt; /dev/null 2&gt;&amp;1 &amp;&#10; tput civis&#10;echo -ne &quot;  \u001B[1;33mSTARTING SERVICES \u001B[1;37m- \u001B[1;33m[&quot;&#10;while true; do&#10;   for((i=0; i&lt;18; i++)); do&#10;   echo -ne &quot;\u001B[1;31m#&quot;&#10;   sleep 0.1s&#10;   done&#10;   [[ -e $HOME/fim ]] &amp;&amp; rm $HOME/fim &amp;&amp; break&#10;   echo -e &quot;\u001B[1;33m]&quot;&#10;   sleep 1s&#10;   tput cuu1&#10;   tput dl1&#10;   echo -ne &quot;  \u001B[1;33mSTARTING SERVICES \u001B[1;37m- \u001B[1;33m[&quot;&#10;done&#10;echo -e &quot;\u001B[1;33m]\u001B[1;37m -\u001B[1;32m ALL SERVICE STARTED !\u001B[1;37m&quot;&#10;tput cnorm&#10;}&#10;&#10;show_menu (){&#10;echo -e &quot;                $GREEN&#10;&#10;$RESET&quot;&#10; &#10; echo -e &quot;                $RED&#10;|    &#10;               KALDAG VPN NEW OVPN SCRIPT&#10;$RESET&quot;&#10;}&#10;&#10;services (){&#10;##certificates&#10;cacert=&#39;-----BEGIN CERTIFICATE-----&#10;MIIE5TCCA82gAwIBAgIJAP0GLynOqm38MA0GCSqGSIb3DQEBCwUAMIGnMQswCQYD&#10;VQQGEwJQSDERMA8GA1UECBMIQmF0YW5nYXMxETAPBgNVBAcTCEJhdGFuZ2FzMRIw&#10;EAYDVQQKEwlTYXZhZ2VWUE4xEjAQBgNVBAsTCVNhdmFnZVZQTjEWMBQGA1UEAxMN&#10;c2F2YWdlLXZwbi50azEPMA0GA1UEKRMGc2VydmVyMSEwHwYJKoZIhvcNAQkBFhJz&#10;YXZhZ2U5OUBnbWFpbC5jb20wHhcNMTgwNDIwMDQ1MTMyWhcNMjgwNDE3MDQ1MTMy&#10;WjCBpzELMAkGA1UEBhMCUEgxETAPBgNVBAgTCEJhdGFuZ2FzMREwDwYDVQQHEwhC&#10;YXRhbmdhczESMBAGA1UEChMJU2F2YWdlVlBOMRIwEAYDVQQLEwlTYXZhZ2VWUE4x&#10;FjAUBgNVBAMTDXNhdmFnZS12cG4udGsxDzANBgNVBCkTBnNlcnZlcjEhMB8GCSqG&#10;SIb3DQEJARYSc2F2YWdlOTlAZ21haWwuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOC&#10;AQ8AMIIBCgKCAQEAwMNjUVNKJvcMBAx5k/doMtYwVhoSV2gnxA16rtZMnkckHRQc&#10;ApvgSWOBc0e2OgL+rlb48BrheyQ9aSLiHrfGPvzpVQfpGCwSQxayEiNKdRmlb6wl&#10;IIlnhfXyKYXx9x/fZNQWGmhczckrXl84ZYbLKglmnfXSEM0PUlfj7pujjXSsZTPV&#10;2Pe92+sf/2ZyYotA2XXqnXIPjaPUo/kQYqmLTSY7weaYLisxn9TTJo6V0Qap2poY&#10;FLpH7fjWCTun7jZ5CiWVIVARkZRXmurLlu+Z+TMlPK3DW9ASXA2gw8rctsoyLJym&#10;V+6hkZiJ3k0X17SNIDibDG4vn8VFEFehOrqKXQIDAQABo4IBEDCCAQwwHQYDVR0O&#10;BBYEFDC3ZJF7tPbQ9SUDMm6P0hxXmvNIMIHcBgNVHSMEgdQwgdGAFDC3ZJF7tPbQ&#10;9SUDMm6P0hxXmvNIoYGtpIGqMIGnMQswCQYDVQQGEwJQSDERMA8GA1UECBMIQmF0&#10;YW5nYXMxETAPBgNVBAcTCEJhdGFuZ2FzMRIwEAYDVQQKEwlTYXZhZ2VWUE4xEjAQ&#10;BgNVBAsTCVNhdmFnZVZQTjEWMBQGA1UEAxMNc2F2YWdlLXZwbi50azEPMA0GA1UE&#10;KRMGc2VydmVyMSEwHwYJKoZIhvcNAQkBFhJzYXZhZ2U5OUBnbWFpbC5jb22CCQD9&#10;Bi8pzqpt/DAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQCdv9MOSR8O&#10;b9wRw4qd681eTxUYEACFVZpY3eK3vJYyGtblYHIwfCPTWL6yXQxbMud4C1ISIwel&#10;UFv/qnz/GZmAkN0qB5tNSvB48123F1AWfhhXWG+o+xWxUi+eqsXdUVZ1tpP5WQaH&#10;EUtU6SZ1AXO6l6b/RTXymRrEInCPfbGsEnucnG7naOpBaNRXmpiMppOwzR42sd6I&#10;QOvXkj2e8v9tQ05cffjexks+rfb/d80+1nfkv0HCLWxcdU8yOUqVryhdZLB6Rhw/&#10;crldSHwrGWN+qptpFD160iJLIv3p5vWwUAgRoRai9iHuJMOHn4aDX0N8tbCfS+R5&#10;qn8GWiHaXEu8&#10;-----END CERTIFICATE-----&#39;;&#10;&#10;servercert=&#39;Certificate:&#10;    Data:&#10;        Version: 3 (0x2)&#10;        Serial Number: 1 (0x1)&#10;    Signature Algorithm: sha256WithRSAEncryption&#10;        Issuer: C=PH, ST=Batangas, L=Batangas, O=SavageVPN, OU=SavageVPN, CN=savage-vpn.tk/name=server/emailAddress=savage99@gmail.com&#10;        Validity&#10;            Not Before: Apr 20 04:53:44 2018 GMT&#10;            Not After : Apr 17 04:53:44 2028 GMT&#10;        Subject: C=PH, ST=Batangas, L=Batangas, O=SavageVPN, OU=SavageVPN, CN=savage-vpn.tk/name=server/emailAddress=savage99@gmail.com&#10;        Subject Public Key Info:&#10;            Public Key Algorithm: rsaEncryption&#10;                Public-Key: (2048 bit)&#10;                Modulus:&#10;                    00:b6:a9:b9:e6:f9:19:85:24:ba:6b:dc:7e:b2:d4:&#10;                    2c:01:46:26:fa:3e:41:ee:0c:b9:18:27:99:34:27:&#10;                    61:eb:4f:cb:83:c0:0b:43:27:05:53:a5:b9:3c:5a:&#10;                    8a:c5:7e:2e:72:1d:f9:83:97:44:b5:00:21:36:d7:&#10;                    51:27:be:b7:d0:0c:2c:09:38:52:a0:e0:89:6f:cb:&#10;                    0e:11:37:d9:7c:43:fe:b1:25:c1:2f:78:25:c1:a0:&#10;                    15:c9:1d:35:b6:1d:33:e9:e6:75:83:4b:30:54:a4:&#10;                    4e:f5:01:ae:fc:0c:37:c0:c7:07:43:4c:04:50:80:&#10;                    c8:13:9a:27:4c:d1:6d:c6:87:e4:38:38:67:c1:87:&#10;                    e4:3a:e3:79:11:c1:23:d4:2c:72:b7:0c:60:72:c7:&#10;                    29:7e:36:17:09:2d:ca:9d:b3:49:2f:2f:56:85:a9:&#10;                    24:34:5a:e7:eb:4b:ee:cf:43:bb:20:ef:dc:26:95:&#10;                    e6:dd:3a:8a:61:d8:33:b0:28:0f:fb:ce:d9:db:dd:&#10;                    ca:2f:85:f0:ec:66:58:67:77:8e:e0:a0:21:f8:b5:&#10;                    fe:e3:02:7e:3c:9c:5c:91:65:1a:bc:3c:6f:ce:3d:&#10;                    b8:38:8e:b0:d4:5b:ef:a5:e1:b3:0c:f4:bf:49:95:&#10;                    7b:1f:9f:41:9f:ce:fa:ae:e1:e7:68:f4:f9:a6:99:&#10;                    74:95&#10;                Exponent: 65537 (0x10001)&#10;        X509v3 extensions:&#10;            X509v3 Basic Constraints: &#10;                CA:FALSE&#10;            Netscape Cert Type: &#10;                SSL Server&#10;            Netscape Comment: &#10;                Easy-RSA Generated Server Certificate&#10;            X509v3 Subject Key Identifier: &#10;                0C:4B:B3:78:75:C7:5E:C8:16:D2:A7:BC:8E:15:3F:33:E3:58:19:04&#10;            X509v3 Authority Key Identifier: &#10;                keyid:30:B7:64:91:7B:B4:F6:D0:F5:25:03:32:6E:8F:D2:1C:57:9A:F3:48&#10;                DirName:/C=PH/ST=Batangas/L=Batangas/O=SavageVPN/OU=SavageVPN/CN=savage-vpn.tk/name=server/emailAddress=savage99@gmail.com&#10;                serial:FD:06:2F:29:CE:AA:6D:FC&#10;&#10;            X509v3 Extended Key Usage: &#10;                TLS Web Server Authentication&#10;            X509v3 Key Usage: &#10;                Digital Signature, Key Encipherment&#10;            X509v3 Subject Alternative Name: &#10;                DNS:server&#10;    Signature Algorithm: sha256WithRSAEncryption&#10;         95:13:80:8a:95:42:9e:16:b6:58:5f:4a:d2:74:61:fb:25:04:&#10;         3c:77:fa:09:41:05:e3:9b:df:93:4e:65:8e:b8:05:87:35:c0:&#10;         9a:eb:62:fa:16:0d:15:28:79:b7:7f:8c:55:72:7a:31:16:3f:&#10;         ff:ba:29:70:0c:96:78:6e:1e:a9:ff:42:d7:f2:53:43:e6:f3:&#10;         a4:3a:02:7b:85:18:18:bc:b6:56:47:3b:be:ae:6f:1c:93:8b:&#10;         13:55:0d:b1:51:30:c2:f4:03:c9:a9:cf:bb:ad:60:70:ec:32:&#10;         1e:e5:74:d5:4d:2b:5e:02:73:28:b0:84:28:f4:6c:93:45:a1:&#10;         f8:3c:58:91:38:21:7b:b2:8f:fe:26:4c:18:72:a3:13:79:46:&#10;         b8:43:8c:cc:5c:03:7c:20:8a:51:25:8b:d0:80:a8:ae:33:5c:&#10;         19:20:f6:a9:02:39:47:42:1d:37:c6:ec:9f:6e:80:5b:61:0b:&#10;         53:bf:26:4b:6d:b5:a6:98:21:e0:ad:42:3a:7d:3f:c9:00:a3:&#10;         61:4c:76:e0:45:36:0b:7e:71:38:37:4f:73:a9:6f:bf:7a:77:&#10;         04:8d:27:cb:e3:d4:11:f4:c3:c5:85:c2:1d:8a:9f:3b:da:43:&#10;         97:8d:f3:3e:30:51:b4:ad:2b:65:04:58:f3:95:7f:23:b2:3a:&#10;         f8:bd:7c:f8&#10;-----BEGIN CERTIFICATE-----&#10;MIIFWDCCBECgAwIBAgIBATANBgkqhkiG9w0BAQsFADCBpzELMAkGA1UEBhMCUEgx&#10;ETAPBgNVBAgTCEJhdGFuZ2FzMREwDwYDVQQHEwhCYXRhbmdhczESMBAGA1UEChMJ&#10;U2F2YWdlVlBOMRIwEAYDVQQLEwlTYXZhZ2VWUE4xFjAUBgNVBAMTDXNhdmFnZS12&#10;cG4udGsxDzANBgNVBCkTBnNlcnZlcjEhMB8GCSqGSIb3DQEJARYSc2F2YWdlOTlA&#10;Z21haWwuY29tMB4XDTE4MDQyMDA0NTM0NFoXDTI4MDQxNzA0NTM0NFowgacxCzAJ&#10;BgNVBAYTAlBIMREwDwYDVQQIEwhCYXRhbmdhczERMA8GA1UEBxMIQmF0YW5nYXMx&#10;EjAQBgNVBAoTCVNhdmFnZVZQTjESMBAGA1UECxMJU2F2YWdlVlBOMRYwFAYDVQQD&#10;Ew1zYXZhZ2UtdnBuLnRrMQ8wDQYDVQQpEwZzZXJ2ZXIxITAfBgkqhkiG9w0BCQEW&#10;EnNhdmFnZTk5QGdtYWlsLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC&#10;ggEBALapueb5GYUkumvcfrLULAFGJvo+Qe4MuRgnmTQnYetPy4PAC0MnBVOluTxa&#10;isV+LnId+YOXRLUAITbXUSe+t9AMLAk4UqDgiW/LDhE32XxD/rElwS94JcGgFckd&#10;NbYdM+nmdYNLMFSkTvUBrvwMN8DHB0NMBFCAyBOaJ0zRbcaH5Dg4Z8GH5DrjeRHB&#10;I9QscrcMYHLHKX42Fwktyp2zSS8vVoWpJDRa5+tL7s9DuyDv3CaV5t06imHYM7Ao&#10;D/vO2dvdyi+F8OxmWGd3juCgIfi1/uMCfjycXJFlGrw8b849uDiOsNRb76Xhswz0&#10;v0mVex+fQZ/O+q7h52j0+aaZdJUCAwEAAaOCAYswggGHMAkGA1UdEwQCMAAwEQYJ&#10;YIZIAYb4QgEBBAQDAgZAMDQGCWCGSAGG+EIBDQQnFiVFYXN5LVJTQSBHZW5lcmF0&#10;ZWQgU2VydmVyIENlcnRpZmljYXRlMB0GA1UdDgQWBBQMS7N4dcdeyBbSp7yOFT8z&#10;41gZBDCB3AYDVR0jBIHUMIHRgBQwt2SRe7T20PUlAzJuj9IcV5rzSKGBraSBqjCB&#10;pzELMAkGA1UEBhMCUEgxETAPBgNVBAgTCEJhdGFuZ2FzMREwDwYDVQQHEwhCYXRh&#10;bmdhczESMBAGA1UEChMJU2F2YWdlVlBOMRIwEAYDVQQLEwlTYXZhZ2VWUE4xFjAU&#10;BgNVBAMTDXNhdmFnZS12cG4udGsxDzANBgNVBCkTBnNlcnZlcjEhMB8GCSqGSIb3&#10;DQEJARYSc2F2YWdlOTlAZ21haWwuY29tggkA/QYvKc6qbfwwEwYDVR0lBAwwCgYI&#10;KwYBBQUHAwEwCwYDVR0PBAQDAgWgMBEGA1UdEQQKMAiCBnNlcnZlcjANBgkqhkiG&#10;9w0BAQsFAAOCAQEAlROAipVCnha2WF9K0nRh+yUEPHf6CUEF45vfk05ljrgFhzXA&#10;muti+hYNFSh5t3+MVXJ6MRY//7opcAyWeG4eqf9C1/JTQ+bzpDoCe4UYGLy2Vkc7&#10;vq5vHJOLE1UNsVEwwvQDyanPu61gcOwyHuV01U0rXgJzKLCEKPRsk0Wh+DxYkTgh&#10;e7KP/iZMGHKjE3lGuEOMzFwDfCCKUSWL0ICorjNcGSD2qQI5R0IdN8bsn26AW2EL&#10;U78mS221ppgh4K1COn0/yQCjYUx24EU2C35xODdPc6lvv3p3BI0ny+PUEfTDxYXC&#10;HYqfO9pDl43zPjBRtK0rZQRY85V/I7I6+L18+A==&#10;-----END CERTIFICATE-----&#39;;&#10;&#10;serverkey=&#39;-----BEGIN PRIVATE KEY-----&#10;MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQC2qbnm+RmFJLpr&#10;3H6y1CwBRib6PkHuDLkYJ5k0J2HrT8uDwAtDJwVTpbk8WorFfi5yHfmDl0S1ACE2&#10;11EnvrfQDCwJOFKg4Ilvyw4RN9l8Q/6xJcEveCXBoBXJHTW2HTPp5nWDSzBUpE71&#10;Aa78DDfAxwdDTARQgMgTmidM0W3Gh+Q4OGfBh+Q643kRwSPULHK3DGByxyl+NhcJ&#10;Lcqds0kvL1aFqSQ0WufrS+7PQ7sg79wmlebdOoph2DOwKA/7ztnb3covhfDsZlhn&#10;d47goCH4tf7jAn48nFyRZRq8PG/OPbg4jrDUW++l4bMM9L9JlXsfn0Gfzvqu4edo&#10;9PmmmXSVAgMBAAECggEAOwhHKDpA4SKpjMpJuAmR3yeI2T7dl81M1F2XyZ8gqiez&#10;ofSiryUhN5NLdhHc306UPBUr2jc84TIVid+0PqAIT5hfcutc6NkoEZUSCsZ95wci&#10;fKWy9WBi81yFLeXewehWKrVsLO5TxEcFrXDJ2HMqYYbw9fLPQiUchBlBsjXMwGgG&#10;W8R2WlQaIh0siJzg+FjwOPEbZA7jAJfyGt80HDWVOfsHxsSX80m8rq2nMppXsngF&#10;hhosj/f/WOPJLiA+/Odkv1ZXS1rqnr5GuwdzrEnibqXOx9LCuxp9MZ8t6qWDvgUf&#10;dy1AB2DKRi9s4NCJHPpITXek4ELawLmGxp7KEzQ/0QKBgQDoU16ZGTCVCT/kQlRz&#10;DRZ2fFXNEvEohCTxYJ72iT6MGxZw+2fuZG6VL9fAgUVLleKKUCFUzM3GPQWEQ1ry&#10;VKQjIqQZjyR+rzdqbHOcG4qYz93enH0FIB9cW/FiU3m5EAzU+TkagZCFq254Kb7i&#10;IQzrWTn24jFX1fQkgcNoXbNUMwKBgQDJRtEs/4e/enVs/6iGjjTGltjyXPS3QM/k&#10;ylZGL+Wc1gQWAsfTO6tYMMPVupyyl2JQjhUydIu3g7D2R4IRKlpprEd8S0MoJou9&#10;Lp/JudlDDJs9Q6Z2q99JpbXdhJ2aOTmSgOKHnkFQRRP/LOxaNwuE/xuhYWubvtFW&#10;y9u+B8uMFwKBgQCJuZqTweYWA+S3aUbs6W5OkUjACKGj9ip8WV4DIrtMjWZRVgh3&#10;v1v63uDVAw1UUKd6fSQ1RDAce+JAVTmd/OVM2uVTLZNh8nc0hNRIT99q1Zdet4A5&#10;wKA2vV6sfnXjaotg2dmrR/Gn/EfBvmWlYhhpkHyXSeIcgv53geGYhiugFwKBgQC3&#10;pRmtyOh+2KjTbuDBBHc6yt/fItlVaplE0yismX8S/mJ0As13+fV4XeYQ2Feoy180&#10;yK6mfpgMNOf9jXkrWE1uJXaD/dekhqbxUd0RHbUR7CqoV1VG6cKtW7j4CMwTryrM&#10;dTQ7MTW+m4iHRuHP3nFwQ6NeN5kLXat7Wj2AwXQCuQKBgESdvXETE6Oy3GVeO1zd&#10;tDlYxpA620daYaNo9MDpV49m89Lt8Maou080+gEJDrqqhyiaEQStrvz31mXIA+w7&#10;YTX1gKAF4qCXy3IKLqN3umdpEYkV2MVEfXlUE6aZZMogta9F5cne3CNDyHzq/RvS&#10;l9rNm+ntgV3+QioNbRWhG9fb&#10;-----END PRIVATE KEY-----&#39;;&#10;&#10;dh=&#39;-----BEGIN DH PARAMETERS-----&#10;MIIBCAKCAQEAohzwXz9fsjw+G9Q14qINNOhZnTt/b30zzJYm4o2NIzAngM6E6GPm&#10;N5USUt0grZw6h3VP9LyqQoGi/bHFz33YFG5lgDF8FAASEh07/leF7s0ohhK8pspC&#10;JVD+mRatwBrIImXUpJvYI2pXKxtCOnDa2FFjAOHKixiAXqVcmJRwNaSklQcrpXdn&#10;/09cr0rbFoovn+f1agly4FxYYs7P0XkvSHm3gVW/mhAUr1hvZlbBaWFSVUdgcVOi&#10;FXQ/AVkvxYaO8pFI2Vh+CNMk7Vvi8d3DTayvoL2HTgFi+OIEbiiE/Nzryu+jDGc7&#10;79FkBHWOa/7eD2nFrHScUJcwWiSevPQjQwIBAg==&#10;-----END DH PARAMETERS-----&#39;;&#10;&#10;&#10;&#10;apt-get update -y&#10;#sudo timedatectl set-timezone Asia/ Manila&#10;timedatectl&#10;apt-get install openvpn easy-rsa -y&#10;apt-get install net-tools screen sudo mysql-client nano fail2ban unzip apache2 build-essential curl build-essential libwrap0-dev libpam0g-dev libdbus-1-dev libreadline-dev libnl-route-3-dev libpcl1-dev libopts25-dev autogen libgnutls28-dev libseccomp-dev libhttp-parser-dev php libapache2-mod-php -y&#10;&#10;MYIP=$(wget -qO- ipv4.icanhazip.com);&#10;# Making script folders and keys&#10;mkdir /etc/openvpn/script&#10;mkdir /etc/openvpn/log&#10;mkdir /etc/openvpn/keys&#10;mkdir /var/www/html/stat&#10;touch /var/www/html/stat/tcp.txt&#10;touch /var/www/html/stat/udp.txt&#10;&#10;# Making File to the script folders and keys&#10;cat &lt;&lt; EOF &gt; /etc/openvpn/keys/ca.crt&#10;$cacert&#10;EOF&#10;&#10;cat &lt;&lt; EOF &gt; /etc/openvpn/keys/server.crt&#10;$servercert&#10;EOF&#10;&#10;cat &lt;&lt; EOF &gt; /etc/openvpn/keys/server.key&#10;$serverkey&#10;EOF&#10;&#10;cat &lt;&lt; EOF &gt; /etc/openvpn/keys/dh2048.pem&#10;$dh&#10;EOF&#10;&#10;&#10;cat &lt;&lt; EOF &gt; /etc/openvpn/script/config.sh&#10;#!/bin/bash&#10;##Dababase Server&#10;HOST=&#39;$dbhost&#39;&#10;USER=&#39;$dbuser&#39;&#10;PASS=&#39;$dbpass&#39;&#10;DB=&#39;$dbname&#39;&#10;PORT=&#39;$dbport&#39;&#10;EOF&#10;&#10;cat &lt;&lt; EOF &gt; /etc/openvpn/server.conf&#10;mode server &#10;tls-server &#10;port 1194&#10;proto tcp &#10;duplicate-cn&#10;dev tun&#10;keepalive 1 180&#10;comp-lzo&#10;resolv-retry infinite &#10;max-clients 1000&#10;ca /etc/openvpn/keys/ca.crt &#10;cert /etc/openvpn/keys/server.crt &#10;key /etc/openvpn/keys/server.key &#10;dh /etc/openvpn/keys/dh2048.pem &#10;verify-client-cert none&#10;username-as-common-name &#10;auth-user-pass-verify /etc/openvpn/script/login.sh via-env&#10;tmp-dir &quot;/etc/openvpn/&quot; # &#10;server 172.20.0.0 255.255.0.0&#10;push &quot;redirect-gateway def1&quot; &#10;push &quot;dhcp-option DNS 8.8.8.8&quot;&#10;push &quot;dhcp-option DNS 8.8.4.4&quot;&#10;push &quot;sndbuf 393216&quot;&#10;push &quot;rcvbuf 393216&quot;&#10;tun-mtu 1400 &#10;mssfix 1360&#10;verb 3&#10;script-security 3&#10;cipher AES-128-CBC&#10;tcp-nodelay&#10;EOF&#10;&#10;cat &lt;&lt; EOF &gt; /etc/openvpn/server1.conf&#10;mode server &#10;tls-server &#10;port 110&#10;proto udp&#10;dev tun&#10;duplicate-cn&#10;keepalive 1 180&#10;resolv-retry infinite &#10;max-clients 1000&#10;ca /etc/openvpn/keys/ca.crt &#10;cert /etc/openvpn/keys/server.crt &#10;key /etc/openvpn/keys/server.key &#10;dh /etc/openvpn/keys/dh2048.pem &#10;verify-client-cert none&#10;username-as-common-name &#10;auth-user-pass-verify /etc/openvpn/script/login.sh via-env&#10;tmp-dir &quot;/etc/openvpn/&quot; # &#10;server 172.30.0.0 255.255.0.0&#10;push &quot;redirect-gateway def1&quot; &#10;push &quot;dhcp-option DNS 8.8.8.8&quot;&#10;push &quot;dhcp-option DNS 8.8.4.4&quot;&#10;push &quot;sndbuf 393216&quot;&#10;push &quot;rcvbuf 393216&quot;&#10;tun-mtu 1400 &#10;mssfix 1360&#10;verb 3&#10;cipher AES-128-CBC&#10;tcp-nodelay&#10;script-security 3&#10;EOF&#10;&#10;#client-connect file&#10;cat &lt;&lt;&#39;EOF&#39; &gt;/etc/openvpn/login/connect.sh&#10;#!/bin/bash&#10;&#10;tm=&quot;$(date +%s)&quot;&#10;dt=&quot;$(date +&#39;%Y-%m-%d %H:%M:%S&#39;)&quot;&#10;timestamp=&quot;$(date +&#39;%FT%TZ&#39;)&quot;&#10;&#10;. /etc/openvpn/login/config.sh&#10;&#10;##set status online to user connected&#10;mysql -u $USER -p$PASS -D $DB -h $HOST -e &quot;UPDATE users SET is_active=&#39;1&#39; WHERE user_name=&#39;$common_name&#39; &quot;&#10;EOF&#10;&#10;#TCP client-disconnect file&#10;cat &lt;&lt;&#39;EOF&#39; &gt;/etc/openvpn/login/disconnect.sh&#10;#!/bin/bash&#10;tm=&quot;$(date +%s)&quot;&#10;dt=&quot;$(date +&#39;%Y-%m-%d %H:%M:%S&#39;)&quot;&#10;timestamp=&quot;$(date +&#39;%FT%TZ&#39;)&quot;&#10;&#10;. /etc/openvpn/login/config.sh&#10;&#10;mysql -u $USER -p$PASS -D $DB -h $HOST -e &quot;UPDATE users SET is_active=&#39;0&#39; WHERE user_name=&#39;$common_name&#39; &quot;&#10;EOF&#10;&#10;echo &#39;fs.file-max = 51200&#10;net.core.rmem_max = 67108864&#10;net.core.wmem_max = 67108864&#10;net.core.netdev_max_backlog = 250000&#10;net.core.somaxconn = 4096&#10;net.ipv4.tcp_tw_reuse = 1&#10;net.ipv4.tcp_fin_timeout = 30&#10;net.ipv4.tcp_keepalive_time = 1200&#10;net.ipv4.ip_local_port_range = 10000 65000&#10;net.ipv4.tcp_max_syn_backlog = 8192&#10;net.ipv4.tcp_max_tw_buckets = 5000&#10;net.ipv4.tcp_mem = 25600 51200 102400&#10;net.ipv4.tcp_rmem = 4096 87380 67108864&#10;net.ipv4.tcp_wmem = 4096 65536 67108864&#10;net.ipv4.tcp_mtu_probing = 1&#10;net.core.default_qdisc=fq&#10;net.ipv4.tcp_congestion_control=bbr&#10;net.ipv4.ip_forward=1&#10;net.ipv4.icmp_echo_ignore_all = 1&#39; &gt;&gt; /etc/sysctl.conf&#10;&#10;echo &#39;* soft nofile 512000&#10;* hard nofile 512000&#39; &gt;&gt; /etc/security/limits.conf&#10;ulimit -n 512000&#10;SELINUX=disabled &#10;sysctl -p&#10;&#10;iptables -F; iptables -X; iptables -Z&#10;iptables -t nat -A POSTROUTING -s 172.20.0.0/16 -o enp1s0 -j MASQUERADE&#10;iptables -t nat -A POSTROUTING -s 172.20.0.0/16 -o enp1s0 -j SNAT --to-source `curl ipecho.net/plain`&#10;iptables -t nat -A POSTROUTING -s 172.20.0.0/16 -o eth0 -j MASQUERADE&#10;iptables -t nat -A POSTROUTING -s 172.20.0.0/16 -o eth0 -j SNAT --to-source `curl ipecho.net/plain`&#10;iptables -t nat -A POSTROUTING -s 172.20.0.0/16 -o ens3 -j MASQUERADE&#10;iptables -t nat -A POSTROUTING -s 172.20.0.0/16 -o ens3 -j SNAT --to-source `curl ipecho.net/plain`&#10;iptables -t nat -A POSTROUTING -s 172.30.0.0/16 -o eth0 -j MASQUERADE&#10;iptables -t nat -A POSTROUTING -s 172.30.0.0/16 -o eth0 -j SNAT --to-source `curl ipecho.net/plain`&#10;iptables -t nat -A POSTROUTING -s 172.30.0.0/16 -o ens3 -j MASQUERADE&#10;iptables -t nat -A POSTROUTING -s 172.30.0.0/16 -o ens3 -j SNAT --to-source `curl ipecho.net/plain`&#10;iptables -t nat -A POSTROUTING -s 172.30.0.0/16 -o enp1s0 -j MASQUERADE&#10;iptables -t nat -A POSTROUTING -s 172.30.0.0/16 -o enp1s0 -j SNAT --to-source `curl ipecho.net/plain`&#10;&#10;&#10;sudo apt install debconf-utils -y&#10;echo iptables-persistent iptables-persistent/autosave_v4 boolean true | sudo debconf-set-selections&#10;echo iptables-persistent iptables-persistent/autosave_v6 boolean true | sudo debconf-set-selections&#10;#useradd -p $(openssl passwd -1 codeph) jhoe -ou 0 -g 0&#10;sudo apt-get install iptables-persistent -y&#10;iptables-save &gt; /etc/iptables/rules.v4 &#10;ip6tables-save &gt; /etc/iptables/rules.v6&#10;&#10;apt-get install squid -y&#10;echo &quot;http_port 8080&#10;acl to_vpn dst `curl ipinfo.io/ip`&#10;http_access allow to_vpn &#10;via off&#10;forwarded_for off&#10;request_header_access Allow allow all&#10;request_header_access Authorization allow all&#10;request_header_access WWW-Authenticate allow all&#10;request_header_access Proxy-Authorization allow all&#10;request_header_access Proxy-Authenticate allow all&#10;request_header_access Cache-Control allow all&#10;request_header_access Content-Encoding allow all&#10;request_header_access Content-Length allow all&#10;request_header_access Content-Type allow all&#10;request_header_access Date allow all&#10;request_header_access Expires allow all&#10;request_header_access Host allow all&#10;request_header_access If-Modified-Since allow all&#10;request_header_access Last-Modified allow all&#10;request_header_access Location allow all&#10;request_header_access Pragma allow all&#10;request_header_access Accept allow all&#10;request_header_access Accept-Charset allow all&#10;request_header_access Accept-Encoding allow all&#10;request_header_access Accept-Language allow all&#10;request_header_access Content-Language allow all&#10;request_header_access Mime-Version allow all&#10;request_header_access Retry-After allow all&#10;request_header_access Title allow all&#10;request_header_access Connection allow all&#10;request_header_access Proxy-Connection allow all&#10;request_header_access User-Agent allow all&#10;request_header_access Cookie allow all&#10;request_header_access All deny all &#10;http_access deny all&quot;| sudo tee /etc/squid/squid.conf&#10;&#10;chmod -R 755 /etc/openvpn&#10;cd /var/www/html/stat&#10;chmod 775 *&#10;apt-get install stunnel4 -y&#10;sed -i &#39;s/ENABLED=0/ENABLED=1/g&#39; /etc/default/stunnel4&#10;&#10;cat &lt;&lt;EOF &gt;/etc/stunnel/stunnel.pem&#10;-----BEGIN RSA PRIVATE KEY-----&#10;MIIEpAIBAAKCAQEAuyrnC0X1e5LsyPVtB0nOj/RPUXJ1jbv+8PcSrAdyvmwq/H3p&#10;eIKEmZ756XMMPKZuS5+FaYV7Qw6lntj0mYwdwO2dzV84XZrFPC/rioSjka9rLsIH&#10;wFK6Zb4rmRbmfEjcoZ22aejbbXlVzScUMRAN3NpvLPcsRH8OPzLR7j5P0CnnBQnS&#10;EKRlwvEqNEqa6qir8DbMnfPh7Lo0V6g15R70ae/VR0MPA5+5Ce0slNt8SQdFmaD5&#10;NL8n+bvkVtJfawfcugdZ5J45rcAc/zBdrtmvmnbVoPLnazDQVkd2u2zfBQtEwZmX&#10;3juAL4Iqb9mh3YIAVqeXVR+pmbcDtHJiKBJxuwIDAQABAoIBAQC3+A6LTSNiaGMn&#10;j9yv2kMXyfqgwtF7E/sdnK0UvGlzdFy4O4bddeSiHtnkNbokby5gVJbMxnAG1IHE&#10;ZdnehxPDy4tdDygXEYamhy+Mwp0IGJVQq1T1HBus38R4wEKijPeYP63J4iC0NRw5&#10;/xxgsTf/ChFW8Ejptr0pL2mbNFI89xRs6Ibgd4MTwLpLi/Pt5dG29iBVXWBBFYkN&#10;wWVDObgR1HevWCOdyQhYIpkfbiMrf5/Kq81pIVT6XR4iYsatLdk2ZGmXoKhskFeh&#10;blMc5DEEQcncQEGlq/mBcDi3o/i7CvXjM/qMuW/mhK16InDYJ3PuMykFmu493d6N&#10;lMmbDdjxAoGBAODa9cDRdXa6jzdwPSWiBpRrxLFXHXLmFHzqzCxZKf5TO5cqUceX&#10;0+AzRS2RG6q4B4yum3wuDyXNNCZCc/TlGIntJCuNwP9rDxZ/pvs6TewXmj4rns4w&#10;59tVhAv4rM+aCxpwZWEFExgqK1sEZKy7EGaqc3jDnA5dzKr5ZTKMDScTAoGBANUX&#10;l04dPzSdQ+x6SsvsfpjAkArVeTLeO0P68qt1D+eQq9XZYiXR//Bog5y4D7g4k2w9&#10;j68CO8wYc+LJUG9ZEa+cVE3TdJPFvA+KSWtQC+rGCGXSUncxFRwyrNwA4fU3dSzZ&#10;GmAm/6tUmbDDpYZzCJF7wUFDZzlTJckf4plFB5e5AoGAEjRoFTZgJj6wfbKOoM9f&#10;bQDUqe79qWHLYtm3shd9+ONQPcrlWB2Iv+wmu6u167p+kftJB2LLQyo8AKT8smUh&#10;+XjDpusRJxzJ2e533Hs599VpXYM2lkcLXoyr5jQ5+YzlPTzAWHyKsTgoznOqmvmC&#10;OG2wb6SWq+sYOPd8I/2GyxUCgYBIh94dXYEdBIaRIFMDND0m+yxMM7ssIE5l5i3h&#10;RFgkhq6mfHaWzvLhvoFFv7TCDKfJSO72L7lwz8XqJIG3VMbbUkezsczVW5GWbIhu&#10;+XEE+WD0X3FoVpGL5ofF3psKn1TH7iG3Jq8RfxtM+lsF93OsKUZvU2T4MyACZFL5&#10;vnBGKQKBgQDZtaNicrnrlu9iP5Eaj0Py2+2MUiP6miB2tARU9yAVQbp3zptjysZG&#10;90eT3stwpNoFz8pidC+TsLvc6+Co941piRoT8zH8ezqxcHvjy2ITTrGOq4tJBPr6&#10;euRNREMSAo3j/2P2kOWK2uHbqkEI2x8epWs/gqAFbuM5Gkk3XfM74g==&#10;-----END RSA PRIVATE KEY-----&#10;-----BEGIN CERTIFICATE-----&#10;MIID8TCCAtmgAwIBAgIJAJtwwttWENtAMA0GCSqGSIb3DQEBCwUAMIGOMQswCQYD&#10;VQQGEwJQaDERMA8GA1UECAwIQmF0YW5nYXMxETAPBgNVBAcMCEJhdGFuZ2FzMQ8w&#10;DQYDVQQKDAZDb2RlUGgxFDASBgNVBAsMC0NvZGVQaCBUZWFtMREwDwYDVQQDDAhK&#10;aG9lIFhpaTEfMB0GCSqGSIb3DQEJARYQY29kZXBoQGdtYWlsLmNvbTAeFw0yMDAz&#10;MTkwOTU3MThaFw0yMzAzMTkwOTU3MThaMIGOMQswCQYDVQQGEwJQaDERMA8GA1UE&#10;CAwIQmF0YW5nYXMxETAPBgNVBAcMCEJhdGFuZ2FzMQ8wDQYDVQQKDAZDb2RlUGgx&#10;FDASBgNVBAsMC0NvZGVQaCBUZWFtMREwDwYDVQQDDAhKaG9lIFhpaTEfMB0GCSqG&#10;SIb3DQEJARYQY29kZXBoQGdtYWlsLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEP&#10;ADCCAQoCggEBALsq5wtF9XuS7Mj1bQdJzo/0T1FydY27/vD3EqwHcr5sKvx96XiC&#10;hJme+elzDDymbkufhWmFe0MOpZ7Y9JmMHcDtnc1fOF2axTwv64qEo5Gvay7CB8BS&#10;umW+K5kW5nxI3KGdtmno2215Vc0nFDEQDdzabyz3LER/Dj8y0e4+T9Ap5wUJ0hCk&#10;ZcLxKjRKmuqoq/A2zJ3z4ey6NFeoNeUe9Gnv1UdDDwOfuQntLJTbfEkHRZmg+TS/&#10;J/m75FbSX2sH3LoHWeSeOa3AHP8wXa7Zr5p21aDy52sw0FZHdrts3wULRMGZl947&#10;gC+CKm/Zod2CAFanl1UfqZm3A7RyYigScbsCAwEAAaNQME4wHQYDVR0OBBYEFHWI&#10;km1tRz5tBz9nZYRK0cR/qm8dMB8GA1UdIwQYMBaAFHWIkm1tRz5tBz9nZYRK0cR/&#10;qm8dMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAIgxWkM0Y/HF5Cjy&#10;JoLyGkuXwvMKQeBgZ8Pp8eD/5dcRmAETxRwDUROy138IHFXaF8a+UB0cOAzBIiGw&#10;NQt50aU2gx+gasQGuEFqyF8SeBOEKqkjCLMve9heum8fHix2KcD8FDWqXfeuaiFW&#10;uIF6F/1g5+4ZGRWvDD2d3ivh0kRfvCMkWXYp969yBAgVDApuF9PaMPcJiCcWz5a5&#10;hQE5NF7hMpYUagqnr5bryqpcps4j9KkQ+RdM9ZwW9WIDKg3gEBgbKUEAvVjv1bY2&#10;lQ15l8h2WoFxzpP7BTzIic1gLhxh6/YsM2RU6WUPmhUPzUP3xUpx7f+LEdFpuoAs&#10;PYeNUPo=&#10;-----END CERTIFICATE-----&#10;EOF&#10;&#10;cat &lt;&lt;EOF &gt;/etc/stunnel/stunnel.conf&#10;cert=/etc/stunnel/stunnel.pem&#10;socket = a:SO_REUSEADDR=1&#10;socket = l:TCP_NODELAY=1&#10;socket = r:TCP_NODELAY=1&#10;client = no&#10;&#10;[openvpn]&#10;connect = 127.0.0.1:1194&#10;accept = 443&#10;EOF&#10;chmod 600 /etc/stunnel/stunnel.pem&#10;&#10;apt-get install netcat lsof php php-mysqli php-mysql php-gd php-mbstring python -y&#10;cat &lt;&lt; websock &gt; /usr/local/sbin/proxy.py&#10;#!/usr/bin/env python3&#10;# encoding: utf-8&#10;# SocksProxy By: KALDAG VPN&#10;import socket, threading, thread, select, signal, sys, time, getopt&#10;&#10;# CONFIG&#10;LISTENING_ADDR = &#39;0.0.0.0&#39;&#10;LISTENING_PORT = 80&#10;&#10;PASS = &#39;&#39;&#10;&#10;# CONST&#10;BUFLEN = 4096 * 4&#10;TIMEOUT = 60&#10;DEFAULT_HOST = &#39;127.0.0.1:1194&#39;&#10;RESPONSE = &#39;HTTP/1.1 101 Switching Protocols \n\n&#39;&#10;&#10;&#10;class Server(threading.Thread):&#10;    def __init__(self, host, port):&#10;        threading.Thread.__init__(self)&#10;        self.running = False&#10;        self.host = host&#10;        self.port = port&#10;        self.threads = []&#10;        self.threadsLock = threading.Lock()&#10;        self.logLock = threading.Lock()&#10;&#10;    def run(self):&#10;        self.soc = socket.socket(socket.AF_INET)&#10;        self.soc.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)&#10;        self.soc.settimeout(2)&#10;        self.soc.bind((self.host, self.port))&#10;        self.soc.listen(0)&#10;        self.running = True&#10;&#10;        try:&#10;            while self.running:&#10;                try:&#10;                    c, addr = self.soc.accept()&#10;                    c.setblocking(1)&#10;                except socket.timeout:&#10;                    continue&#10;&#10;                conn = ConnectionHandler(c, self, addr)&#10;                conn.start()&#10;                self.addConn(conn)&#10;        finally:&#10;            self.running = False&#10;            self.soc.close()&#10;&#10;    def printLog(self, log):&#10;        self.logLock.acquire()&#10;        print log&#10;        self.logLock.release()&#10;&#10;    def addConn(self, conn):&#10;        try:&#10;            self.threadsLock.acquire()&#10;            if self.running:&#10;                self.threads.append(conn)&#10;        finally:&#10;            self.threadsLock.release()&#10;&#10;    def removeConn(self, conn):&#10;        try:&#10;            self.threadsLock.acquire()&#10;            self.threads.remove(conn)&#10;        finally:&#10;            self.threadsLock.release()&#10;&#10;    def close(self):&#10;        try:&#10;            self.running = False&#10;            self.threadsLock.acquire()&#10;&#10;            threads = list(self.threads)&#10;            for c in threads:&#10;                c.close()&#10;        finally:&#10;            self.threadsLock.release()&#10;&#10;&#10;class ConnectionHandler(threading.Thread):&#10;    def __init__(self, socClient, server, addr):&#10;        threading.Thread.__init__(self)&#10;        self.clientClosed = False&#10;        self.targetClosed = True&#10;        self.client = socClient&#10;        self.client_buffer = &#39;&#39;&#10;        self.server = server&#10;        self.log = &#39;Connection: &#39; + str(addr)&#10;&#10;    def close(self):&#10;        try:&#10;            if not self.clientClosed:&#10;                self.client.shutdown(socket.SHUT_RDWR)&#10;                self.client.close()&#10;        except:&#10;            pass&#10;        finally:&#10;            self.clientClosed = True&#10;&#10;        try:&#10;            if not self.targetClosed:&#10;                self.target.shutdown(socket.SHUT_RDWR)&#10;                self.target.close()&#10;        except:&#10;            pass&#10;        finally:&#10;            self.targetClosed = True&#10;&#10;    def run(self):&#10;        try:&#10;            self.client_buffer = self.client.recv(BUFLEN)&#10;&#10;            hostPort = self.findHeader(self.client_buffer, &#39;X-Real-Host&#39;)&#10;&#10;            if hostPort == &#39;&#39;:&#10;                hostPort = DEFAULT_HOST&#10;&#10;            split = self.findHeader(self.client_buffer, &#39;X-Split&#39;)&#10;&#10;            if split != &#39;&#39;:&#10;                self.client.recv(BUFLEN)&#10;&#10;            if hostPort != &#39;&#39;:&#10;                passwd = self.findHeader(self.client_buffer, &#39;X-Pass&#39;)&#10;\t\t\t\t&#10;                if len(PASS) != 0 and passwd == PASS:&#10;                    self.method_CONNECT(hostPort)&#10;                elif len(PASS) != 0 and passwd != PASS:&#10;                    self.client.send(&#39;HTTP/1.1 400 WrongPass!\n\n&#39;)&#10;                elif hostPort.startswith(&#39;127.0.0.1&#39;) or hostPort.startswith(&#39;localhost&#39;):&#10;                    self.method_CONNECT(hostPort)&#10;                else:&#10;                    self.client.send(&#39;HTTP/1.1 403 Forbidden!\n\n&#39;)&#10;            else:&#10;                print &#39;- No X-Real-Host!&#39;&#10;                self.client.send(&#39;HTTP/1.1 400 NoXRealHost!\n\n&#39;)&#10;&#10;        except Exception as e:&#10;            self.log += &#39; - error: &#39; + e.strerror&#10;            self.server.printLog(self.log)&#10;\t    pass&#10;        finally:&#10;            self.close()&#10;            self.server.removeConn(self)&#10;&#10;    def findHeader(self, head, header):&#10;        aux = head.find(header + &#39;: &#39;)&#10;&#10;        if aux == -1:&#10;            return &#39;&#39;&#10;&#10;        aux = head.find(&#39;:&#39;, aux)&#10;        head = head[aux+2:]&#10;        aux = head.find(&#39;\n&#39;)&#10;&#10;        if aux == -1:&#10;            return &#39;&#39;&#10;&#10;        return head[:aux];&#10;&#10;    def connect_target(self, host):&#10;        i = host.find(&#39;:&#39;)&#10;        if i != -1:&#10;            port = int(host[i+1:])&#10;            host = host[:i]&#10;        else:&#10;            if self.method==&#39;CONNECT&#39;:&#10;                port = 333&#10;            else:&#10;                port = 80&#10;                port = 8070&#10;                port = 8799&#10;                port = 3128&#10;&#10;        (soc_family, soc_type, proto, _, address) = socket.getaddrinfo(host, port)[0]&#10;&#10;        self.target = socket.socket(soc_family, soc_type, proto)&#10;        self.targetClosed = False&#10;        self.target.connect(address)&#10;&#10;    def method_CONNECT(self, path):&#10;        self.log += &#39; - CONNECT &#39; + path&#10;&#10;        self.connect_target(path)&#10;        self.client.sendall(RESPONSE)&#10;        self.client_buffer = &#39;&#39;&#10;&#10;        self.server.printLog(self.log)&#10;        self.doCONNECT()&#10;&#10;    def doCONNECT(self):&#10;        socs = [self.client, self.target]&#10;        count = 0&#10;        error = False&#10;        while True:&#10;            count += 1&#10;            (recv, _, err) = select.select(socs, [], socs, 3)&#10;            if err:&#10;                error = True&#10;            if recv:&#10;                for in_ in recv:&#10;\t\t    try:&#10;                        data = in_.recv(BUFLEN)&#10;                        if data:&#10;\t\t\t    if in_ is self.target:&#10;\t\t\t\tself.client.send(data)&#10;                            else:&#10;                                while data:&#10;                                    byte = self.target.send(data)&#10;                                    data = data[byte:]&#10;&#10;                            count = 0&#10;\t\t\telse:&#10;\t\t\t    break&#10;\t\t    except:&#10;                        error = True&#10;                        break&#10;            if count == TIMEOUT:&#10;                error = True&#10;&#10;            if error:&#10;                break&#10;&#10;&#10;def print_usage():&#10;    print &#39;Usage: proxy.py -p &lt;port&gt;&#39;&#10;    print &#39;       proxy.py -b &lt;bindAddr&gt; -p &lt;port&gt;&#39;&#10;    print &#39;       proxy.py -b 0.0.0.0 -p 80&#39;&#10;&#10;def parse_args(argv):&#10;    global LISTENING_ADDR&#10;    global LISTENING_PORT&#10;&#10;    try:&#10;        opts, args = getopt.getopt(argv,&quot;hb:p:&quot;,[&quot;bind=&quot;,&quot;port=&quot;])&#10;    except getopt.GetoptError:&#10;        print_usage()&#10;        sys.exit(2)&#10;    for opt, arg in opts:&#10;        if opt == &#39;-h&#39;:&#10;            print_usage()&#10;            sys.exit()&#10;        elif opt in (&quot;-b&quot;, &quot;--bind&quot;):&#10;            LISTENING_ADDR = arg&#10;        elif opt in (&quot;-p&quot;, &quot;--port&quot;):&#10;            LISTENING_PORT = int(arg)&#10;&#10;&#10;def main(host=LISTENING_ADDR, port=LISTENING_PORT):&#10;&#10;    print &quot;\n:-------PythonProxy-------:\n&quot;&#10;    print &quot;Listening addr: &quot; + LISTENING_ADDR&#10;    print &quot;Listening port: &quot; + str(LISTENING_PORT) + &quot;\n&quot;&#10;    print &quot;:-------------------------:\n&quot;&#10;&#10;    server = Server(LISTENING_ADDR, LISTENING_PORT)&#10;    server.start()&#10;&#10;    while True:&#10;        try:&#10;            time.sleep(2)&#10;        except KeyboardInterrupt:&#10;            print &#39;Stopping...&#39;&#10;            server.close()&#10;            break&#10;&#10;if __name__ == &#39;__main__&#39;:&#10;    parse_args(sys.argv[1:])&#10;    main()&#10;&#10;websock&#10;&#10;cat &lt;&lt; autostart &gt; /root/auto&#10;#!/bin/bash&#10;if nc -z localhost 80; then&#10;    echo &quot;SocksProxy running&quot;&#10;else&#10;    echo &quot;Starting Port 80&quot;&#10;    screen -dmS proxy2 python /usr/local/sbin/proxy.py 80&#10;fi&#10;autostart&#10;&#10;chmod +x /root/auto&#10;/root/auto;&#10;crontab -r&#10;echo &quot;SHELL=/bin/bash&#10;* * * * * /bin/bash /root/auto &gt;/dev/null 2&gt;&amp;1&quot; | crontab -&#10;&#10;cat &lt;&lt;&quot;EOM&quot; &gt;/var/www/html/client.ovpn&#10;client&#10;dev tun&#10;proto tcp&#10;remote $MYIP 1194&#10;remote-cert-tls server&#10;connect-retry infinite&#10;resolv-retry infinite&#10;nobind&#10;tun-mtu 1500&#10;mssfix 1460&#10;persist-key&#10;persist-tun&#10;auth-user-pass&#10;auth none&#10;auth-nocache&#10;cipher none&#10;script-security 3&#10;cipher AES-128-CBC&#10;keysize 0&#10;setenv CLIENT_CERT 0&#10;reneg-sec 0&#10;verb 3&#10;# OVPN_ACCESS_SERVER_PROFILE=VPN&#39;S&#10;&#10;&lt;ca&gt;&#10;-----BEGIN CERTIFICATE-----&#10;MIIE5TCCA82gAwIBAgIJAP0GLynOqm38MA0GCSqGSIb3DQEBCwUAMIGnMQswCQYD&#10;VQQGEwJQSDERMA8GA1UECBMIQmF0YW5nYXMxETAPBgNVBAcTCEJhdGFuZ2FzMRIw&#10;EAYDVQQKEwlTYXZhZ2VWUE4xEjAQBgNVBAsTCVNhdmFnZVZQTjEWMBQGA1UEAxMN&#10;c2F2YWdlLXZwbi50azEPMA0GA1UEKRMGc2VydmVyMSEwHwYJKoZIhvcNAQkBFhJz&#10;YXZhZ2U5OUBnbWFpbC5jb20wHhcNMTgwNDIwMDQ1MTMyWhcNMjgwNDE3MDQ1MTMy&#10;WjCBpzELMAkGA1UEBhMCUEgxETAPBgNVBAgTCEJhdGFuZ2FzMREwDwYDVQQHEwhC&#10;YXRhbmdhczESMBAGA1UEChMJU2F2YWdlVlBOMRIwEAYDVQQLEwlTYXZhZ2VWUE4x&#10;FjAUBgNVBAMTDXNhdmFnZS12cG4udGsxDzANBgNVBCkTBnNlcnZlcjEhMB8GCSqG&#10;SIb3DQEJARYSc2F2YWdlOTlAZ21haWwuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOC&#10;AQ8AMIIBCgKCAQEAwMNjUVNKJvcMBAx5k/doMtYwVhoSV2gnxA16rtZMnkckHRQc&#10;ApvgSWOBc0e2OgL+rlb48BrheyQ9aSLiHrfGPvzpVQfpGCwSQxayEiNKdRmlb6wl&#10;IIlnhfXyKYXx9x/fZNQWGmhczckrXl84ZYbLKglmnfXSEM0PUlfj7pujjXSsZTPV&#10;2Pe92+sf/2ZyYotA2XXqnXIPjaPUo/kQYqmLTSY7weaYLisxn9TTJo6V0Qap2poY&#10;FLpH7fjWCTun7jZ5CiWVIVARkZRXmurLlu+Z+TMlPK3DW9ASXA2gw8rctsoyLJym&#10;V+6hkZiJ3k0X17SNIDibDG4vn8VFEFehOrqKXQIDAQABo4IBEDCCAQwwHQYDVR0O&#10;BBYEFDC3ZJF7tPbQ9SUDMm6P0hxXmvNIMIHcBgNVHSMEgdQwgdGAFDC3ZJF7tPbQ&#10;9SUDMm6P0hxXmvNIoYGtpIGqMIGnMQswCQYDVQQGEwJQSDERMA8GA1UECBMIQmF0&#10;YW5nYXMxETAPBgNVBAcTCEJhdGFuZ2FzMRIwEAYDVQQKEwlTYXZhZ2VWUE4xEjAQ&#10;BgNVBAsTCVNhdmFnZVZQTjEWMBQGA1UEAxMNc2F2YWdlLXZwbi50azEPMA0GA1UE&#10;KRMGc2VydmVyMSEwHwYJKoZIhvcNAQkBFhJzYXZhZ2U5OUBnbWFpbC5jb22CCQD9&#10;Bi8pzqpt/DAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQCdv9MOSR8O&#10;b9wRw4qd681eTxUYEACFVZpY3eK3vJYyGtblYHIwfCPTWL6yXQxbMud4C1ISIwel&#10;UFv/qnz/GZmAkN0qB5tNSvB48123F1AWfhhXWG+o+xWxUi+eqsXdUVZ1tpP5WQaH&#10;EUtU6SZ1AXO6l6b/RTXymRrEInCPfbGsEnucnG7naOpBaNRXmpiMppOwzR42sd6I&#10;QOvXkj2e8v9tQ05cffjexks+rfb/d80+1nfkv0HCLWxcdU8yOUqVryhdZLB6Rhw/&#10;crldSHwrGWN+qptpFD160iJLIv3p5vWwUAgRoRai9iHuJMOHn4aDX0N8tbCfS+R5&#10;qn8GWiHaXEu8&#10;-----END CERTIFICATE-----&#10;&lt;/ca&gt;&#10;EOM&#10;&#10;cat &lt;&lt;&quot;EOM&quot; &gt;/var/www/html/index.html&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;&lt;meta charset=&quot;utf-8&quot;&gt;&#10;&lt;title&gt;KALDAG VPN&lt;/title&gt;&#10;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;&#10;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;&#10;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://bootswatch.com/4/slate/bootstrap.min.css&quot; media=&quot;screen&quot;&gt;&#10;&lt;link href=&quot;https://fonts.googleapis.com/css?family=Press+Start+2P&quot; rel=&quot;stylesheet&quot;&gt;&#10;&lt;style&gt;&#10;    body {&#10;     font-family: &quot;Press Start 2P&quot;, cursive;    &#10;    }&#10;    .fn-color {&#10;        color: #ff00ff;&#10;        background-image: -webkit-linear-gradient(92deg, #f35626, #feab3a);&#10;        -webkit-background-clip: text;&#10;        -webkit-text-fill-color: transparent;&#10;        -webkit-animation: hue 5s infinite linear;&#10;    }&#10;&#10;    @-webkit-keyframes hue {&#10;      from {&#10;        -webkit-filter: hue-rotate(0deg);&#10;      }&#10;      to {&#10;        -webkit-filter: hue-rotate(-360deg);&#10;      }&#10;    }&#10;&lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;div class=&quot;container&quot; style=&quot;padding-top: 50px&quot;&gt;&#10;&lt;div class=&quot;jumbotron&quot;&gt;&#10;&lt;h1 class=&quot;display-3 text-center fn-color&quot;&gt;MikSoft&lt;/h1&gt;&#10;&lt;h4 class=&quot;text-center fn-color&quot;&gt;By Michaele Abalos&lt;/h4&gt;&#10;&lt;/div&gt;&#10;&lt;/div&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;EOM&#10;sed -i &#39;s/Listen 80/Listen 81/g&#39; /etc/apache2/ports.conf&#10;}&#10;&#10;service_start () {&#10;service apache2 restart&#10;update-rc.d stunnel4 enable&#10;service stunnel4 restart&#10;update-rc.d openvpn enable&#10;update-rc.d apache2 enable&#10;service apache2 restart&#10;service openvpn restart&#10;cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak&#10;update-rc.d squid enable&#10;&#10;sudo apt-get autoremove -y &gt; /dev/null 2&gt;&amp;1&#10;sudo apt-get clean &gt; /dev/null 2&gt;&amp;1&#10;history -c&#10;cd /root || exit&#10;rm -f /root/installer.sh&#10;}&#10;&#10;&#10;#Selecting UserType&#10;clear&#10;show_menu&#10;echo -e &quot;                $GREEN Type of your Server  $RESET&quot;&#10;PS3=&#39;Choose or Type a Plan: &#39;&#10;options=(&quot;Premium&quot; &quot;VIP&quot; &quot;Private&quot; &quot;Quit&quot;)&#10;select opt in &quot;${options[@]}&quot;; do&#10;case &quot;$opt,$REPLY&quot; in&#10;Premium,*|*,Premium) &#10;echo &quot;&quot;;&#10;clear&#10;show_menu&#10;fun_bar &#39;services&#39;&#10;fun_bar2 &#39;service_start&#39;&#10;&#10;cat &lt;&lt;&quot;EOM&quot; &gt;/etc/openvpn/script/login.sh&#10;#!/bin/bash&#10;. /etc/openvpn/script/config.sh&#10;tm=&quot;$(date +%s)&quot;&#10;dt=&quot;$(date +&#39;%Y-%m-%d %H:%M:%S&#39;)&quot;&#10;PRE=&quot;user_name=&#39;$username&#39; AND auth_vpn=md5(&#39;$password&#39;) AND status=&#39;live&#39; AND is_freeze=0 AND is_ban=0 AND duration &gt; 0&quot;&#10;VIP=&quot;user_name=&#39;$username&#39; AND auth_vpn=md5(&#39;$password&#39;) AND status=&#39;live&#39; AND is_freeze=0 AND is_ban=0 AND vip_duration &gt; 0&quot;&#10;PRIV=&quot;user_name=&#39;$username&#39; AND auth_vpn=md5(&#39;$password&#39;) AND status=&#39;live&#39; AND is_freeze=0 AND is_ban=0 AND private_duration &gt; 0&quot;&#10;Query=&quot;SELECT user_name FROM users WHERE $PRE OR $VIP OR $PRIV&quot;&#10;user_name=`mysql -u $USER -p$PASS -D $DB -h $HOST -sN -e &quot;$Query&quot;`&#10;[ &quot;$user_name&quot; != &#39;&#39; ] &amp;&amp; [ &quot;$user_name&quot; = &quot;$username&quot; ] &amp;&amp; echo &quot;user : $username&quot; &amp;&amp; echo &#39;authentication ok.&#39; &amp;&amp; exit 0 || echo &#39;authentication failed.&#39;; exit 1&#10;EOM&#10;&#10;chmod 755 /etc/openvpn/script/login.sh&#10;&#10;&#10;echo -e &quot;                $GREEN 1) PREMIUM Done Installing$RESET&quot;;&#10;break ;;&#10;VIP,*|*,VIP) &#10;echo &quot;&quot;;&#10;clear&#10;show_menu&#10;fun_bar &#39;services&#39;&#10;fun_bar2 &#39;service_start&#39;&#10;&#10;cat &lt;&lt;&quot;EOM&quot; &gt;/etc/openvpn/script/login.sh&#10;#!/bin/bash&#10;. /etc/openvpn/script/config.sh&#10;tm=&quot;$(date +%s)&quot;&#10;dt=&quot;$(date +&#39;%Y-%m-%d %H:%M:%S&#39;)&quot;&#10;PRE=&quot;user_name=&#39;$username&#39; AND auth_vpn=md5(&#39;$password&#39;) AND status=&#39;live&#39; AND is_freeze=0 AND is_ban=0 AND duration &gt; 0&quot;&#10;VIP=&quot;user_name=&#39;$username&#39; AND auth_vpn=md5(&#39;$password&#39;) AND status=&#39;live&#39; AND is_freeze=0 AND is_ban=0 AND vip_duration &gt; 0&quot;&#10;PRIV=&quot;user_name=&#39;$username&#39; AND auth_vpn=md5(&#39;$password&#39;) AND status=&#39;live&#39; AND is_freeze=0 AND is_ban=0 AND private_duration &gt; 0&quot;&#10;Query=&quot;SELECT user_name FROM users WHERE $VIP OR $PRIV&quot;&#10;user_name=`mysql -u $USER -p$PASS -D $DB -h $HOST -sN -e &quot;$Query&quot;`&#10;[ &quot;$user_name&quot; != &#39;&#39; ] &amp;&amp; [ &quot;$user_name&quot; = &quot;$username&quot; ] &amp;&amp; echo &quot;user : $username&quot; &amp;&amp; echo &#39;authentication ok.&#39; &amp;&amp; exit 0 || echo &#39;authentication failed.&#39;; exit 1&#10;EOM&#10;chmod 755 /etc/openvpn/script/login.sh&#10;&#10;&#10;echo -e &quot;                $GREEN 2) VIP Done Installing$RESET&quot;;&#10;break ;;&#10; &#10;Private,*|*,Private) &#10;echo &quot;&quot;;&#10;clear&#10;show_menu&#10;fun_bar &#39;services&#39;&#10;fun_bar2 &#39;service_start&#39;&#10;&#10;cat &lt;&lt;&quot;EOM&quot; &gt;/etc/openvpn/script/login.sh&#10;#!/bin/bash&#10;. /etc/openvpn/script/config.sh&#10;tm=&quot;$(date +%s)&quot;&#10;dt=&quot;$(date +&#39;%Y-%m-%d %H:%M:%S&#39;)&quot;&#10;PRE=&quot;user_name=&#39;$username&#39; AND auth_vpn=md5(&#39;$password&#39;) AND status=&#39;live&#39; AND is_freeze=0 AND is_ban=0 AND duration &gt; 0&quot;&#10;VIP=&quot;user_name=&#39;$username&#39; AND auth_vpn=md5(&#39;$password&#39;) AND status=&#39;live&#39; AND is_freeze=0 AND is_ban=0 AND vip_duration &gt; 0&quot;&#10;PRIV=&quot;user_name=&#39;$username&#39; AND auth_vpn=md5(&#39;$password&#39;) AND status=&#39;live&#39; AND is_freeze=0 AND is_ban=0 AND private_duration &gt; 0&quot;&#10;Query=&quot;SELECT user_name FROM users WHERE $PRIV&quot;&#10;user_name=`mysql -u $USER -p$PASS -D $DB -h $HOST -sN -e &quot;$Query&quot;`&#10;[ &quot;$user_name&quot; != &#39;&#39; ] &amp;&amp; [ &quot;$user_name&quot; = &quot;$username&quot; ] &amp;&amp; echo &quot;user : $username&quot; &amp;&amp; echo &#39;authentication ok.&#39; &amp;&amp; exit 0 || echo &#39;authentication failed.&#39;; exit 1&#10;EOM&#10;&#10;chmod 755 /etc/openvpn/script/login.sh&#10;&#10;&#10;echo -e &quot;                $GREEN 3) PRIVATE Done Installing$RESET&quot;;&#10;&#10;break ;;&#10;&#10;Quit,*|*,Quit) echo -e &quot; $RED   Installation Cancelled!$RESET&quot;;&#10;echo -e &quot;                $RED   Rebuild your vps and correct the process.$RESET&quot;;&#10;exit;&#10;break ;; *)&#10;echo -e &quot;                $RED   Invalid: Just choose what you want and type the number then hit enter$RESET&quot;;&#10;esac&#10;done&#10;rm -rf *sh&#10;